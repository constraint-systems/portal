{"version":3,"sources":["State.tsx","Actions.tsx","Pointer.tsx","GitInfo.tsx","Keyboard.tsx","Tips.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["imageMesh","imageMeshMaterial","imageGeometry","getWorldPixelAtZ","z","camera","Math","tan","fov","PI","window","innerHeight","snap2","val","snap","State","round","loadImage","image","src","a","THREE","load","texture","img","worldPixel","w","width","h","height","mesh","scale","set","material","map","setPointer","pointer","x","y","mouse","clip","innerWidth","clip2","target","tempClip","projectToZ","copy","unproject","sub","position","normalize","distance","add","multiplyScalar","setRay","ray","getDimensions","portal","srcWidth","max","min","srcHeight","dstWidth","dst","dstHeight","updateLines","line1","geometry","attributes","array","needsUpdate","makeOutline","color","lineWidth","resolution","MeshLineMaterial","sizeAttenuation","line","MeshLine","setPoints","makeLine","setAttribute","Float32Array","linewidth","makePortal","srcDims","dstDims","portals","s","d","dx","dy","dw","dh","sx","sy","sw","sh","outline","occluder","scene","createPortal","visible","transparent","opacity","userData","kind","Uint8Array","alphaTest","scene2","colorWrite","srcOutline","console","log","outlinesVisible","scene3","dstOutline","maxOrder","length","renderOrder","minOrder","push","drawPointer","ray1","ray2","drawBox","diff","subVectors","applyOutlineVisible","canvas","renderer","scene4","raycaster","zoomRay","intersects","selected","box","down","cameraDown","diffMouse","active","middle","pressed","colorMagenta","setIntersections","e","meshes","concat","setFromCamera","top","areas","indexOf","getSmallestTop","intersectObjects","intersect","object","includes","style","cursor","intersectIds","uuid","selectedIds","i","srcMesh","dstMesh","setHex","Pointer","useEffect","pointerDown","clientX","clientY","setPointerDown","which","ctrlKey","toSelect","setSelected","origin","setPointerCapture","pointerId","pointerMove","setX","setY","index","pointerUp","dims","releasePointerCapture","mouseWheel","sign","deltaY","keyname","aspect","nextScaleX","nextScaleY","newTexture","addEventListener","passive","removeEventListener","GitInfo","right","bottom","background","fontSize","lineHeight","href","rel","gitInfo","lastCommit","Keyboard","key","downHandler","press","toLowerCase","repeat","upHandler","splice","Tips","left","paddingLeft","App","canvasRef","useRef","useState","loaded","setLoaded","document","createElement","cx","getContext","fillStyle","fillRect","size","url","toDataURL","body","backgroundImage","current","alpha","setSize","autoClear","vector","animate","requestAnimationFrame","clear","render","copyFramebufferToTexture","clearDepth","updateProjectionMatrix","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70e43ebc.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { makeOutline } from \"./Actions\";\n\nexport type PointerType = {\n  mouse: THREE.Vector2;\n  clip: THREE.Vector3;\n  clip2: THREE.Vector2;\n  tempClip: THREE.Vector3;\n  ray: THREE.Vector3;\n  diff: THREE.Vector3;\n  diffMouse: THREE.Vector2;\n  active: boolean;\n  middle: boolean;\n  down: {\n    mouse: THREE.Vector2;\n    clip: THREE.Vector3;\n    clip2: THREE.Vector2;\n    tempClip: THREE.Vector3;\n    ray: THREE.Vector3;\n  };\n};\n\nexport type PortalType = {\n  line1: THREE.Line;\n  src: {\n    outline: THREE.Mesh;\n    occluder: THREE.Mesh;\n    mesh: THREE.Mesh;\n    min: THREE.Vector3;\n    max: THREE.Vector3;\n    scale: THREE.Vector3;\n  };\n  dst: {\n    outline: THREE.Mesh;\n    occluder: THREE.Mesh;\n    scene: THREE.Scene;\n    mesh: THREE.Mesh;\n    min: THREE.Vector3;\n    max: THREE.Vector3;\n    scale: THREE.Vector3;\n  };\n};\n\nexport type ImageType = {\n  mesh: THREE.Mesh;\n  material: THREE.MeshBasicMaterial;\n  geometry: THREE.PlaneGeometry;\n  box: THREE.Box3;\n  down: THREE.Vector3;\n};\n\ntype DrawBoxType = {\n  min: THREE.Vector3;\n  max: THREE.Vector3;\n  diff: THREE.Vector3;\n  outline: THREE.Mesh;\n};\n\ntype StateType = {\n  canvas: HTMLCanvasElement | null;\n  camera: THREE.PerspectiveCamera | null;\n  renderer: THREE.WebGLRenderer | null;\n  raycaster: THREE.Raycaster;\n  drawBox: DrawBoxType;\n  scene: THREE.Scene;\n  scene2: THREE.Scene;\n  scene3: THREE.Scene;\n  scene4: THREE.Scene;\n  outlinesVisible: boolean;\n  zoomRay: {\n    ray: THREE.Vector3;\n    tempClip: THREE.Vector3;\n    clip: THREE.Vector3;\n  };\n  pointer: PointerType;\n  intersects: Array<THREE.Object3D>;\n  selected: Array<THREE.Object3D>;\n  image: ImageType;\n  cameraDown: THREE.Vector3;\n  portals: Array<PortalType>;\n  pressed: Array<string>;\n};\n\nlet imageMesh, imageMeshMaterial, imageGeometry;\n{\n  const geometry = new THREE.PlaneGeometry();\n  const texture = new THREE.Texture();\n  const material = new THREE.MeshBasicMaterial({ map: texture });\n  const mesh = new THREE.Mesh(geometry, material);\n  imageGeometry = geometry;\n  imageMeshMaterial = material;\n  imageMesh = mesh;\n}\n\nconst State: StateType = {\n  canvas: null,\n  camera: null,\n  renderer: null,\n  scene: new THREE.Scene(),\n  scene2: new THREE.Scene(),\n  scene3: new THREE.Scene(),\n  scene4: new THREE.Scene(),\n  raycaster: new THREE.Raycaster(),\n  outlinesVisible: true,\n  zoomRay: {\n    clip: new THREE.Vector3(),\n    tempClip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n  },\n  drawBox: {\n    min: new THREE.Vector3(),\n    max: new THREE.Vector3(),\n    diff: new THREE.Vector3(),\n    outline: makeOutline(\"#ff00ff\", 12),\n  },\n  intersects: [],\n  selected: [],\n  image: {\n    mesh: imageMesh,\n    material: imageMeshMaterial,\n    geometry: imageGeometry,\n    box: new THREE.Box3(),\n    down: new THREE.Vector3(),\n  },\n  cameraDown: new THREE.Vector3(),\n  portals: [],\n  pointer: {\n    mouse: new THREE.Vector2(),\n    clip: new THREE.Vector3(),\n    clip2: new THREE.Vector2(),\n    tempClip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n    diffMouse: new THREE.Vector2(),\n    diff: new THREE.Vector3(),\n    active: false,\n    middle: false,\n    down: {\n      mouse: new THREE.Vector2(),\n      clip: new THREE.Vector3(),\n      clip2: new THREE.Vector2(),\n      tempClip: new THREE.Vector3(),\n      ray: new THREE.Vector3(),\n    },\n  },\n  pressed: [],\n};\n\nexport default State;\n","import * as THREE from \"three\";\nimport State, { PointerType, PortalType, ImageType } from \"./State\";\nimport { MeshLine, MeshLineMaterial } from \"meshline\";\n\nexport const getWorldPixelAtZ = (\n  z: number,\n  camera: THREE.PerspectiveCamera | null\n) => {\n  if (camera) {\n    const visibleHeight = 2 * Math.tan((camera.fov * Math.PI) / 360) * z;\n    // convert to ratio based on pixel\n    return visibleHeight / window.innerHeight;\n  } else {\n    return 1;\n  }\n};\n\nexport const snap2 = (val: number): number => {\n  const snap = getWorldPixelAtZ(5, State.camera) * 16;\n  return Math.round(val / snap) * snap;\n};\n\nexport const snap = (val: number): number => {\n  const snap = getWorldPixelAtZ(5, State.camera) * 8;\n  return Math.round(val / snap) * snap;\n};\n\nexport const setRay = (\n  target: THREE.Vector3,\n  tempClip: THREE.Vector3,\n  clip: THREE.Vector3,\n  camera: THREE.PerspectiveCamera | null,\n  projectToZ: number\n) => {\n  if (camera !== null) {\n    tempClip.copy(clip);\n    tempClip.unproject(camera);\n    tempClip.sub(camera.position).normalize();\n    const distance = (projectToZ - camera.position.z) / tempClip.z;\n    target.copy(camera.position).add(tempClip.multiplyScalar(distance));\n    target.x = snap(target.x);\n    target.y = snap(target.y);\n  }\n};\n\nexport const loadImage = async (image: ImageType, src: string) => {\n  const loader = new THREE.TextureLoader();\n  loader.load(src, function (texture) {\n    const img = texture.image;\n\n    // TODO temp scale down for bowie, usually 5\n    const worldPixel = getWorldPixelAtZ(1.5, State.camera);\n    const w = snap2(img.width * worldPixel);\n    const h = snap2(img.height * worldPixel);\n\n    image.mesh.scale.set(w, h, 1);\n    image.material.map = texture;\n  });\n};\n\nexport const setPointer = (pointer: PointerType, x: number, y: number) => {\n  pointer.mouse.set(x, y);\n  pointer.clip.set(\n    (x / window.innerWidth) * 2 - 1,\n    -(y / window.innerHeight) * 2 + 1,\n    0.5\n  );\n  pointer.clip2.set(pointer.clip.x, pointer.clip.y);\n  if (State.camera !== null) {\n    setRay(pointer.ray, pointer.tempClip, pointer.clip, State.camera, 0);\n  }\n};\n\nexport const setPointerDown = (pointer: PointerType) => {\n  // Assumes pointer is up to date\n  pointer.down.mouse.copy(pointer.mouse);\n  pointer.down.clip.copy(pointer.clip);\n  pointer.down.ray.copy(pointer.ray);\n};\n\nexport const getDimensions = (portal: PortalType) => {\n  const srcWidth = portal.src.max.x - portal.src.min.x;\n  const srcHeight = portal.src.max.y - portal.src.min.y;\n  const dstWidth = portal.dst.max.x - portal.dst.min.x;\n  const dstHeight = portal.dst.max.y - portal.dst.min.y;\n  return { srcWidth, srcHeight, dstWidth, dstHeight };\n};\n\nexport const updateLines = (portal: any) => {\n  portal.line1.geometry.attributes.position.array[0] =\n    portal.src.mesh.position.x;\n  portal.line1.geometry.attributes.position.array[1] =\n    portal.src.mesh.position.y;\n  portal.line1.geometry.attributes.position.array[3] =\n    portal.dst.mesh.position.x;\n  portal.line1.geometry.attributes.position.array[4] =\n    portal.dst.mesh.position.y;\n  portal.line1.geometry.attributes.position.needsUpdate = true;\n};\n\nexport const getTop = (meshes: Array<THREE.Object3D>) => {\n  if (meshes.length === 1) {\n    return meshes;\n  } else if (meshes.length === 0) {\n    return [];\n  } else {\n    const renderOrder = meshes.map((mesh) => mesh.renderOrder);\n    const max = Math.max(...renderOrder);\n    const maxIndex = renderOrder.indexOf(max);\n    return [meshes[maxIndex]];\n  }\n};\n\nexport const getSmallestTop = (meshes: Array<THREE.Object3D>) => {\n  if (meshes.length === 1) {\n    return meshes;\n  } else if (meshes.length === 0) {\n    return [];\n  } else {\n    const areas = meshes.map((mesh) => mesh.scale.x * mesh.scale.y);\n    const min = Math.min(...areas);\n    const minIndex = areas.indexOf(min);\n    // const renderOrder = meshes.map((mesh) => mesh.renderOrder);\n    // const max = Math.max(...renderOrder);\n    // const maxIndex = renderOrder.indexOf(max);\n    return [meshes[minIndex]];\n  }\n};\n\nexport const makeOutline = (color: string, lineWidth: number) => {\n  const points = [\n    -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0, -0.5, -0.5, 0,\n  ];\n  const resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n  const material = new MeshLineMaterial({\n    color,\n    lineWidth: lineWidth,\n    sizeAttenuation: 0,\n    resolution,\n  });\n  const line = new MeshLine();\n  line.setPoints(points);\n  const outline = new THREE.Mesh(line, material);\n  return outline;\n};\n\nconst makeLine = () => {\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array([-1, -1, 0, 1, 1, 0]), 3)\n  );\n  const material = new THREE.LineBasicMaterial({\n    color: 0xaaaaaa,\n    linewidth: 8,\n  });\n  return new THREE.Line(geometry, material);\n};\n\nexport const createPortal = (\n  s: Array<number>,\n  d: Array<number>\n): PortalType => {\n  const [dx, dy, dw, dh] = d;\n  const [sx, sy, sw, sh] = s;\n  return {\n    line1: makeLine(),\n    src: {\n      outline: makeOutline(\"#aaaaaa\", 8),\n      mesh: new THREE.Mesh(),\n      occluder: new THREE.Mesh(),\n      min: new THREE.Vector3(sx - sw / 2, sy - sh / 2, 0),\n      max: new THREE.Vector3(sx + sw / 2, sy + sh / 2, 0),\n      scale: new THREE.Vector3(sw, sh, 1),\n    },\n    dst: {\n      outline: makeOutline(\"#aaaaaa\", 8),\n      mesh: new THREE.Mesh(),\n      scene: new THREE.Scene(),\n      occluder: new THREE.Mesh(),\n      min: new THREE.Vector3(dx - dw / 2, dy - dh / 2, 0),\n      max: new THREE.Vector3(dx + dw / 2, dy + dh / 2, 0),\n      scale: new THREE.Vector3(dw, dh, 1),\n    },\n  };\n};\n\nexport const makePortal = (\n  srcDims: Array<number>,\n  dstDims: Array<number>,\n  portals: Array<PortalType>,\n  camera: THREE.Camera\n) => {\n  const portal = createPortal(srcDims, dstDims);\n\n  const { srcWidth, srcHeight, dstWidth, dstHeight } = getDimensions(portal);\n  const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n\n  // TODO hide line for now\n  portal.line1.visible = false;\n\n  const makeSrcTexture = () => {\n    return new THREE.DataTexture(\n      new Uint8Array((srcWidth / worldPixel) * (srcHeight / worldPixel) * 3),\n      srcWidth / worldPixel,\n      srcHeight / worldPixel,\n      THREE.RGBAFormat\n    );\n  };\n\n  const x = portal.dst.min.x + dstWidth / 2;\n  const y = portal.dst.min.y + dstHeight / 2;\n\n  // set src mesh\n  {\n    const mesh = portal.src.mesh;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0,\n    });\n    mesh.geometry = geometry;\n    mesh.material = material;\n    mesh.userData.kind = \"src\";\n\n    mesh.scale.set(srcWidth, srcHeight, 1);\n    mesh.position.x = portal.src.min.x + srcWidth / 2;\n    mesh.position.y = portal.src.min.y + srcHeight / 2;\n\n    if (State.scene) State.scene.add(mesh);\n  }\n\n  const dstOffset = 0;\n\n  // set dst mesh\n  {\n    const texture = makeSrcTexture();\n    const mesh = portal.dst.mesh;\n\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      alphaTest: 0.5,\n    });\n    mesh.userData.kind = \"dst\";\n    mesh.geometry = geometry;\n    mesh.material = material;\n\n    mesh.scale.set(dstWidth, dstHeight, 1);\n    mesh.position.x = x + dstOffset;\n    mesh.position.y = y + dstOffset;\n\n    portal.dst.scene.add(mesh);\n  }\n\n  // set dst line\n  State.scene2.add(portal.line1);\n\n  // set src occluder\n  {\n    const occluder = portal.src.occluder;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    occluder.geometry = geometry;\n    occluder.material = material;\n    occluder.scale.set(srcWidth, srcHeight, 1);\n    occluder.position.x = portal.src.min.x + srcWidth / 2;\n    occluder.position.y = portal.src.min.y + srcHeight / 2;\n    occluder.position.z = 0.00001;\n    occluder.material.colorWrite = false;\n    State.scene2.add(occluder);\n  }\n\n  // set dst occluder\n  {\n    const occluder = portal.dst.occluder;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    occluder.geometry = geometry;\n    occluder.material = material;\n    occluder.scale.set(dstWidth, dstHeight, 1);\n    occluder.position.x = portal.dst.min.x + dstWidth / 2 + dstOffset;\n    occluder.position.y = portal.dst.min.y + dstHeight / 2 + dstOffset;\n    occluder.position.z = 0.00001;\n    occluder.material.colorWrite = false;\n    State.scene2.add(occluder);\n  }\n\n  // set src outline\n  {\n    const srcOutline = portal.src.outline;\n    srcOutline.scale.set(srcWidth, srcHeight, 1);\n    console.log(srcOutline.scale);\n    srcOutline.position.x = portal.src.min.x + srcWidth / 2;\n    srcOutline.position.y = portal.src.min.y + srcHeight / 2;\n    srcOutline.visible = State.outlinesVisible;\n    State.scene3.add(portal.src.outline);\n  }\n\n  // set dst outline\n  {\n    const dstOutline = portal.dst.outline;\n    dstOutline.scale.set(dstWidth, dstHeight, 1);\n    dstOutline.position.x = portal.dst.min.x + dstWidth / 2 + dstOffset;\n    dstOutline.position.y = portal.dst.min.y + dstHeight / 2 + dstOffset;\n    dstOutline.visible = State.outlinesVisible;\n    // portal.dst.scene.add(portal.dst.outline);\n    State.scene3.add(portal.dst.outline);\n  }\n\n  const maxOrder =\n    portals.length > 0\n      ? Math.max(...portals.map((portal) => portal.src.mesh.renderOrder)) + 1\n      : 0;\n\n  const minOrder =\n    portals.length > 0\n      ? Math.min(...portals.map((portal) => portal.dst.outline.renderOrder)) - 1\n      : 999;\n\n  portal.src.mesh.renderOrder = maxOrder;\n  portal.dst.mesh.renderOrder = maxOrder + 1;\n\n  portal.line1.renderOrder = minOrder;\n  portal.src.occluder.renderOrder = minOrder - 1;\n  portal.dst.occluder.renderOrder = minOrder - 2;\n  portal.src.outline.renderOrder = minOrder - 3;\n\n  portal.dst.outline.renderOrder = minOrder - 2;\n\n  State.portals.push(portal);\n\n  updateLines(portal);\n\n  // State.selected = [portal.dst.mesh];\n};\n\nexport const drawPointer = (ray1: THREE.Vector3, ray2: THREE.Vector3) => {\n  const { outline, min, max, diff } = State.drawBox;\n  outline.visible = true;\n  min.copy(ray1).min(ray2);\n  max.copy(ray1).max(ray2);\n  diff.subVectors(max, min);\n  outline.position.x = min.x + diff.x / 2;\n  outline.position.y = min.y + diff.y / 2;\n  outline.scale.x = diff.x;\n  outline.scale.y = diff.y;\n};\n\nexport const applyOutlineVisible = () => {\n  for (let portal of State.portals) {\n    portal.src.outline.visible = State.outlinesVisible;\n    portal.dst.outline.visible = State.outlinesVisible;\n  }\n};\n\nexport const toggleOutlines = () => {\n  State.outlinesVisible = !State.outlinesVisible;\n  applyOutlineVisible();\n};\n","import { useEffect } from \"react\";\nimport State from \"./State\";\nimport * as THREE from \"three\";\nimport {\n  setPointer,\n  setPointerDown,\n  getWorldPixelAtZ,\n  updateLines,\n  getSmallestTop,\n  drawPointer,\n  makePortal,\n  getDimensions,\n  snap,\n} from \"./Actions\";\n\n// const colorCyan = new THREE.Color(\"rgb(152, 215, 170)\");\nconst colorMagenta = new THREE.Color(\"rgb(238, 88, 181)\");\n\nconst setIntersections = (pointer: any, e: any) => {\n  const { portals, raycaster, camera, canvas } = State;\n  if (camera && canvas) {\n    const meshes = portals\n      .map((portal) => portal.dst.mesh)\n      .concat(portals.map((portal) => portal.src.mesh));\n\n    raycaster.setFromCamera(pointer.clip2, camera);\n    const intersects = State.raycaster\n      .intersectObjects(meshes)\n      .map((intersect) => intersect.object);\n\n    const top = getSmallestTop(intersects);\n\n    State.intersects = top;\n    if (State.pressed.includes(\"c\")) State.intersects = [];\n\n    if (State.intersects.length > 0) {\n      canvas.style.cursor = \"default\";\n    } else {\n      canvas.style.cursor = \"crosshair\";\n    }\n\n    const intersectIds = State.intersects.map((intersect) => intersect.uuid);\n    const selectedIds = State.selected.map((mesh) => mesh.uuid);\n    for (let i = 0; i < portals.length; i++) {\n      const portal = portals[i];\n      const srcMesh = portal.src.mesh;\n      const dstMesh = portal.dst.mesh;\n      if (\n        intersectIds.includes(srcMesh.uuid) ||\n        intersectIds.includes(dstMesh.uuid)\n      ) {\n        // @ts-ignore\n        portal.src.outline.material.color.set(0x00ffff);\n        portal.src.outline.visible = true;\n        // @ts-ignore\n        portal.dst.outline.material.color.set(0xff00ff);\n        portal.dst.outline.visible = true;\n        // @ts-ignore\n        portal.line1.material.color.set(colorMagenta);\n      } else {\n        if (\n          !(\n            selectedIds.includes(srcMesh.uuid) ||\n            selectedIds.includes(dstMesh.uuid)\n          )\n        ) {\n          // @ts-ignore\n          portal.src.outline.material.color.setHex(0xaaaaaa);\n          portal.src.outline.visible = State.outlinesVisible;\n          // @ts-ignore\n          portal.dst.outline.material.color.setHex(0xaaaaaa);\n          portal.dst.outline.visible = State.outlinesVisible;\n          // @ts-ignore\n          portal.line1.material.color.setHex(0xaaaaaa);\n        }\n      }\n    }\n  }\n};\n\nconst setSelected = (toSelect: Array<THREE.Object3D>) => {\n  const { portals } = State;\n  State.selected = toSelect;\n\n  if (State.selected.length > 0) {\n    const selectedIds = State.selected.map((mesh) => mesh.uuid);\n    for (let i = 0; i < portals.length; i++) {\n      const portal = portals[i];\n      const srcMesh = portal.src.mesh;\n      const dstMesh = portal.dst.mesh;\n      if (\n        selectedIds.includes(srcMesh.uuid) ||\n        selectedIds.includes(dstMesh.uuid)\n      ) {\n        // @ts-ignore\n        portal.src.outline.material.color.set(0x00ffff);\n        // @ts-ignore\n        portal.src.outline.material.lineWidth = 12;\n        portal.src.outline.visible = true;\n\n        // @ts-ignore\n        portal.dst.outline.material.color.set(0xff00ff);\n        // @ts-ignore\n        portal.dst.outline.material.lineWidth = 12;\n        portal.dst.outline.visible = true;\n      } else {\n        // @ts-ignore\n        portal.src.outline.material.color.setHex(0xaaaaaa);\n        portal.src.outline.visible = State.outlinesVisible;\n        // @ts-ignore\n        portal.src.outline.material.lineWidth = 8;\n        // @ts-ignore\n        portal.dst.outline.material.color.setHex(0xaaaaaa);\n        portal.dst.outline.visible = State.outlinesVisible;\n        // @ts-ignore\n        portal.dst.outline.material.lineWidth = 8;\n        // @ts-ignore\n        portal.line1.material.color.setHex(0xaaaaaa);\n      }\n    }\n  }\n};\n\nconst Pointer = () => {\n  useEffect(() => {\n    const { canvas, pointer, camera, cameraDown, image, portals } = State;\n    if (canvas && camera) {\n      const pointerDown = (e: PointerEvent) => {\n        setPointer(pointer, e.clientX, e.clientY);\n        setPointerDown(pointer);\n        image.down.copy(image.mesh.position);\n        cameraDown.copy(camera.position);\n        pointer.active = true;\n        pointer.middle = e.which === 2;\n\n        setIntersections(pointer, e);\n\n        if (State.intersects.length > 0 && !e.ctrlKey) {\n          setSelected(State.intersects);\n\n          const mesh = State.intersects[0];\n          mesh.userData.origin = new THREE.Vector3();\n          mesh.userData.origin.copy(mesh.position);\n        } else {\n          drawPointer(pointer.down.ray, pointer.ray);\n        }\n\n        canvas.setPointerCapture(e.pointerId);\n      };\n\n      const pointerMove = (e: PointerEvent) => {\n        setPointer(pointer, e.clientX, e.clientY);\n\n        if (pointer.active) {\n          pointer.diffMouse.copy(pointer.mouse).sub(pointer.down.mouse);\n          const worldPixel = getWorldPixelAtZ(camera.position.z, camera);\n          const dx = pointer.diffMouse.x * worldPixel;\n          const dy = pointer.diffMouse.y * worldPixel;\n\n          if (pointer.middle) {\n            // pan when mousewheel button is pressed\n            // pan actually means ove image\n            image.mesh.position.setX(snap(image.down.x + dx));\n            image.mesh.position.setY(snap(image.down.y - dy));\n          } else {\n            if (State.drawBox.outline.visible) {\n              drawPointer(pointer.down.ray, pointer.ray);\n            } else if (State.selected.length > 0) {\n              const mesh = State.selected[0];\n              if (mesh.userData.kind === \"dst\") {\n                const index = portals\n                  .map((portal) => portal.dst.mesh.uuid)\n                  .indexOf(mesh.uuid);\n                const portal = portals[index];\n                const x =\n                  snap(mesh.userData.origin.x - mesh.scale.x / 2 + dx) +\n                  mesh.scale.x / 2;\n                const y =\n                  snap(mesh.userData.origin.y - mesh.scale.y / 2 - dy) +\n                  mesh.scale.y / 2;\n                mesh.position.setX(x);\n                mesh.position.setY(y);\n                portal.dst.min.setX(x - mesh.scale.x / 2);\n                portal.dst.min.setY(y - mesh.scale.y / 2);\n                portal.dst.max.setX(x + mesh.scale.x / 2);\n                portal.dst.max.setY(y + mesh.scale.y / 2);\n\n                portals[index].dst.occluder.position.setX(x);\n                portals[index].dst.occluder.position.setY(y);\n                portals[index].dst.outline.position.setX(x);\n                portals[index].dst.outline.position.setY(y);\n\n                updateLines(portal);\n              } else if (mesh.userData.kind === \"src\") {\n                const index = portals\n                  .map((portal) => portal.src.mesh.uuid)\n                  .indexOf(mesh.uuid);\n                const portal = portals[index];\n                const x =\n                  snap(mesh.userData.origin.x - mesh.scale.x / 2 + dx) +\n                  mesh.scale.x / 2;\n                const y =\n                  snap(mesh.userData.origin.y - mesh.scale.y / 2 - dy) +\n                  mesh.scale.y / 2;\n                mesh.position.setX(x);\n                mesh.position.setY(y);\n                portal.src.min.setX(x - mesh.scale.x / 2);\n                portal.src.min.setY(y - mesh.scale.y / 2);\n                portal.src.max.setX(x + mesh.scale.x / 2);\n                portal.src.max.setY(y + mesh.scale.y / 2);\n\n                portals[index].src.occluder.position.setX(x);\n                portals[index].src.occluder.position.setY(y);\n                portals[index].src.outline.position.setX(x);\n                portals[index].src.outline.position.setY(y);\n\n                portal.src.outline.position.setX(x);\n                portal.src.outline.position.setY(y);\n\n                updateLines(portal);\n              }\n            }\n          }\n        } else {\n          setIntersections(pointer, e);\n        }\n      };\n\n      const pointerUp = (e: PointerEvent) => {\n        pointer.active = false;\n        pointer.middle = false;\n\n        if (State.drawBox.outline.visible === true) {\n          const width = State.drawBox.diff.x;\n          const height = State.drawBox.diff.y;\n          const dims = [\n            State.drawBox.min.x + width / 2,\n            State.drawBox.min.y + height / 2,\n            width,\n            height,\n          ];\n          if (State.scene2) {\n            makePortal(dims, dims, State.portals, camera);\n            State.drawBox.outline.visible = false;\n          }\n        }\n\n        canvas.releasePointerCapture(e.pointerId);\n      };\n\n      const mouseWheel = (e: Event) => {\n        const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n\n        // const visibleHeight = window.innerHeight;\n        // @ts-ignore\n        // const adjusted = visibleHeight + e.deltaY;\n        // @ts-ignore\n        const sign = e.deltaY > 0 ? -1 : 1;\n        // @ts-ignore\n        // const adjust = worldPixel * 32 * sign;\n\n        if (State.selected.length > 0) {\n          const selectedIds = State.selected.map((mesh) => mesh.uuid);\n\n          for (let mesh of State.intersects) {\n            if (selectedIds.includes(mesh.uuid)) {\n              let portal, keyname;\n              if (mesh.userData.kind === \"dst\") {\n                const index = portals\n                  .map((portal) => portal.dst.mesh.uuid)\n                  .indexOf(mesh.uuid);\n                portal = portals[index];\n                keyname = \"dst\";\n              } else if (mesh.userData.kind === \"src\") {\n                const index = portals\n                  .map((portal) => portal.src.mesh.uuid)\n                  .indexOf(mesh.uuid);\n                portal = portals[index];\n                keyname = \"src\";\n              }\n\n              if (portal && keyname) {\n                const aspect =\n                  // @ts-ignore\n                  portal[keyname].scale.x / portal[keyname].scale.y;\n                if (aspect > 1) {\n                  // @ts-ignore\n                  portal[keyname].scale.x += worldPixel * 16 * sign;\n                  // @ts-ignore\n                  portal[keyname].scale.y = portal[keyname].scale.x / aspect;\n                } else {\n                  // @ts-ignore\n                  portal[keyname].scale.y += worldPixel * 16 * sign;\n                  // @ts-ignore\n                  portal[keyname].scale.x = portal[keyname].scale.y * aspect;\n                }\n\n                // const prevScaleX = mesh.scale.x;\n                // const prevScaleY = mesh.scale.y;\n                // @ts-ignore\n                const nextScaleX = snap(portal[keyname].scale.x);\n                // @ts-ignore\n                const nextScaleY = snap(portal[keyname].scale.y);\n\n                // const diffx = pointer.ray.x - mesh.position.x;\n                // const rx = diffx / prevScaleX;\n                // const newRx = diffx / nextScaleX;\n\n                // const x =\n                //   snap(\n                //     mesh.position.x - nextScaleX / 2 + (newRx - rx) * nextScaleX\n                //   ) +\n                //   nextScaleX / 2;\n\n                // const diffy = pointer.ray.y - mesh.position.y;\n                // const ry = diffy / prevScaleY;\n                // const newRy = diffy / nextScaleY;\n                // const y =\n                //   snap(\n                //     mesh.position.y - nextScaleY / 2 + (newRy - ry) * nextScaleY\n                //   ) +\n                //   nextScaleY / 2;\n\n                const x = mesh.position.x;\n                const y = mesh.position.y;\n                mesh.position.x = x;\n                mesh.position.y = y;\n                mesh.scale.x = nextScaleX;\n                mesh.scale.y = nextScaleY;\n\n                if (mesh.userData.kind === \"dst\") {\n                  const index = portals\n                    .map((portal) => portal.dst.mesh.uuid)\n                    .indexOf(mesh.uuid);\n                  portals[index].dst.occluder.position.setX(x);\n                  portals[index].dst.occluder.position.setY(y);\n                  portals[index].dst.outline.position.setX(x);\n                  portals[index].dst.outline.position.setY(y);\n                  portals[index].dst.outline.scale.copy(mesh.scale);\n                  portals[index].dst.occluder.scale.copy(mesh.scale);\n\n                  portal.dst.min.setX(x - mesh.scale.x / 2);\n                  portal.dst.min.setY(y - mesh.scale.y / 2);\n                  portal.dst.max.setX(x + mesh.scale.x / 2);\n                  portal.dst.max.setY(y + mesh.scale.y / 2);\n\n                  updateLines(portal);\n                } else if (mesh.userData.kind === \"src\") {\n                  const index = portals\n                    .map((portal) => portal.src.mesh.uuid)\n                    .indexOf(mesh.uuid);\n                  mesh.position.setX(x);\n                  mesh.position.setY(y);\n                  portals[index].src.occluder.position.setX(x);\n                  portals[index].src.occluder.position.setY(y);\n                  portals[index].src.outline.position.setX(x);\n                  portals[index].src.outline.position.setY(y);\n\n                  portal.src.outline.position.setX(x);\n                  portal.src.outline.position.setY(y);\n\n                  portals[index].src.outline.scale.copy(mesh.scale);\n                  portals[index].src.occluder.scale.copy(mesh.scale);\n\n                  portal.src.min.setX(x - mesh.scale.x / 2);\n                  portal.src.min.setY(y - mesh.scale.y / 2);\n                  portal.src.max.setX(x + mesh.scale.x / 2);\n                  portal.src.max.setY(y + mesh.scale.y / 2);\n\n                  const { srcWidth, srcHeight } = getDimensions(portal);\n                  const worldPixel = getWorldPixelAtZ(\n                    camera.position.z,\n                    State.camera\n                  );\n                  const makeSrcTexture = () => {\n                    return new THREE.DataTexture(\n                      new Uint8Array(\n                        (srcWidth / worldPixel) * (srcHeight / worldPixel) * 3\n                      ),\n                      srcWidth / worldPixel,\n                      srcHeight / worldPixel,\n                      THREE.RGBFormat\n                    );\n                  };\n                  const newTexture = makeSrcTexture();\n                  // @ts-ignore\n                  portal.dst.mesh.material.map = newTexture;\n\n                  updateLines(portal);\n                }\n              }\n            }\n          }\n        } else {\n          // const prevScaleX = image.mesh.scale.x;\n          // const prevScaleY = image.mesh.scale.y;\n          // const nextScaleX = prevScaleX * ratio;\n          // const nextScaleY = prevScaleY * ratio;\n          // const diffx = pointer.ray.x - image.mesh.position.x;\n          // const rx = diffx / prevScaleX;\n          // const newRx = diffx / nextScaleX;\n          // const x = image.mesh.position.x + (newRx - rx) * nextScaleX;\n          // const diffy = pointer.ray.y - image.mesh.position.y;\n          // const ry = diffy / prevScaleY;\n          // const newRy = diffy / nextScaleY;\n          // const y = image.mesh.position.y + (newRy - ry) * nextScaleY;\n          // image.mesh.position.x = x;\n          // image.mesh.position.y = y;\n          // image.mesh.scale.multiplyScalar(ratio);\n        }\n      };\n\n      canvas.addEventListener(\"pointerdown\", pointerDown);\n      canvas.addEventListener(\"pointermove\", pointerMove);\n      canvas.addEventListener(\"pointerup\", pointerUp);\n      canvas.addEventListener(\"pointercancel\", pointerUp);\n      canvas.addEventListener(\"mousewheel\", mouseWheel, { passive: false });\n      return () => {\n        canvas.removeEventListener(\"pointerdown\", pointerDown);\n        canvas.removeEventListener(\"pointermove\", pointerMove);\n        canvas.removeEventListener(\"pointerup\", pointerUp);\n        canvas.removeEventListener(\"pointercancel\", pointerUp);\n        canvas.removeEventListener(\"mousewheel\", mouseWheel);\n      };\n    }\n  }, []);\n\n  return null;\n};\n\nexport default Pointer;\n","import gitInfo from \"./gitInfo.json\";\n\nconst GitInfo = () => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        right: 0,\n        bottom: 0,\n        background: \"white\",\n        color: \"black\",\n        fontSize: 13,\n        lineHeight: 1.2,\n      }}\n    >\n      Under construction\n      <br />\n      <a\n        href=\"https://github.com/constraint-systems/portal\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {gitInfo.lastCommit}\n      </a>\n    </div>\n  );\n};\n\nexport default GitInfo;\n","import { useEffect } from \"react\";\nimport { getWorldPixelAtZ, toggleOutlines } from \"./Actions\";\nimport State from \"./State\";\n\nfunction Keyboard() {\n  useEffect(() => {\n    const pressed = (key: string) => {\n      if (State.camera) {\n        const worldPixel = getWorldPixelAtZ(\n          State.camera.position.z,\n          State.camera\n        );\n        if (key === \"arrowdown\") {\n          State.image.mesh.position.y -= worldPixel * 32;\n        } else if (key === \"arrowup\") {\n          State.image.mesh.position.y += worldPixel * 32;\n        } else if (key === \"arrowleft\") {\n          State.image.mesh.position.x -= worldPixel * 32;\n        } else if (key === \"arrowright\") {\n          State.image.mesh.position.x += worldPixel * 32;\n        } else if (key === \"v\") {\n          toggleOutlines();\n        } else if (key === \"c\") {\n          if (State.canvas) State.canvas.style.cursor = \"crosshair\";\n        }\n      }\n    };\n\n    const downHandler = (e: KeyboardEvent) => {\n      let press = e.key.toLowerCase();\n      if (!e.repeat) State.pressed.push(press);\n      pressed(press);\n    };\n\n    const upHandler = (e: KeyboardEvent) => {\n      let press = e.key.toLowerCase();\n      const index = State.pressed.indexOf(press);\n      if (index !== -1) {\n        State.pressed.splice(index, 1);\n        console.log(State.pressed);\n      }\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []);\n\n  return null;\n}\n\nexport default Keyboard;\n","const Tips = () => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        left: 0,\n        bottom: 0,\n        background: \"white\",\n        color: \"black\",\n        fontSize: 13,\n        lineHeight: 1.2,\n        paddingLeft: \"0.5ch\",\n      }}\n    >\n      v - toggle outlines\n      <br />\n      hold c - make new instead of select\n    </div>\n  );\n};\n\nexport default Tips;\n","import { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport State from \"./State\";\nimport Pointer from \"./Pointer\";\nimport { applyOutlineVisible, getWorldPixelAtZ, loadImage } from \"./Actions\";\nimport GitInfo from \"./GitInfo\";\nimport Keyboard from \"./Keyboard\";\nimport Tips from \"./Tips\";\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    const canvas = document.createElement(\"canvas\");\n    const size = 8;\n    const inner = 2;\n    canvas.width = size;\n    canvas.height = size;\n    const cx = canvas.getContext(\"2d\");\n    if (cx) {\n      cx.fillStyle = \"#222\";\n      cx.fillRect(size / 2 - inner / 2, size / 2 - inner / 2, inner, inner);\n      const url = canvas.toDataURL();\n      document.body.style.backgroundImage = `url(\"${url}\")`;\n    }\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    State.canvas = canvas;\n\n    if (canvas !== null) {\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      State.camera = camera;\n\n      const renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.autoClear = false;\n      State.renderer = renderer;\n\n      setLoaded(true);\n\n      State.scene.add(State.image.mesh);\n      loadImage(State.image, \"bowiebig.png\");\n\n      camera.position.z = 5;\n\n      State.drawBox.outline.visible = false;\n      State.drawBox.outline.renderOrder = 999;\n      State.scene3.add(State.drawBox.outline);\n\n      const vector = new THREE.Vector2();\n\n      applyOutlineVisible();\n\n      // {\n      //   const canvas = document.createElement(\"canvas\");\n      //   const size = 32;\n      //   canvas.width = size;\n      //   canvas.height = size;\n      //   const cx = canvas.getContext(\"2d\");\n      //   if (cx) {\n      //     console.log(\"fill\");\n      //     cx.fillStyle = \"pink\";\n      //     const inner = 2;\n      //     cx.fillRect(0, 0, inner, inner);\n      //     cx.fillRect(size - inner, 0, inner, inner);\n      //     cx.fillRect(size - inner, size - inner, inner, inner);\n      //     cx.fillRect(0, size - inner, inner, inner);\n      //     const texture = new THREE.CanvasTexture(canvas);\n      //     texture.wrapS = THREE.RepeatWrapping;\n      //     texture.wrapT = THREE.RepeatWrapping;\n      //     const cols = Math.floor(window.innerWidth / size);\n      //     const rows = Math.floor(window.innerHeight / size);\n      //     texture.repeat.set(cols, rows);\n      //     State.scene.background = texture;\n      //   }\n      // }\n      // console.log(State.scene);\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n\n        renderer.clear();\n        renderer.render(State.scene, camera);\n\n        const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n        for (let i = 0; i < State.portals.length; i++) {\n          const portal = State.portals[i];\n          vector.x = portal.src.min.x / worldPixel + window.innerWidth / 2;\n          vector.y = portal.src.min.y / worldPixel + window.innerHeight / 2;\n\n          renderer.copyFramebufferToTexture(\n            vector,\n            // @ts-ignore\n            portal.dst.mesh.material.map\n          );\n          renderer.render(portal.dst.scene, camera);\n        }\n\n        renderer.render(State.scene2, camera);\n        renderer.clearDepth();\n        renderer.render(State.scene3, camera);\n        renderer.render(State.scene4, camera);\n      };\n      animate();\n    }\n  }, []);\n\n  useEffect(() => {\n    const { camera, renderer } = State;\n    if (camera && renderer) {\n      const handleResize = () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      };\n      window.addEventListener(\"resize\", handleResize);\n    }\n  }, []);\n\n  return (\n    <>\n      <canvas ref={canvasRef}></canvas>\n      {loaded ? (\n        <>\n          <Pointer />\n          <Keyboard />\n          <Tips />\n        </>\n      ) : null}\n      <GitInfo />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}