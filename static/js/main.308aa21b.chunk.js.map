{"version":3,"sources":["State.tsx","Constants.js","Actions.tsx","Pointer.tsx","GitInfo.tsx","Keyboard.tsx","Tips.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["imageMesh","imageMeshMaterial","imageGeometry","outlineVertices","Float32Array","getWorldPixelAtZ","z","camera","Math","tan","fov","PI","window","innerHeight","loadImage","image","src","a","THREE","load","texture","img","worldPixel","State","w","width","h","height","mesh","scale","set","material","map","setPointer","pointer","x","y","mouse","clip","innerWidth","clip2","target","tempClip","projectToZ","copy","unproject","sub","position","normalize","distance","add","multiplyScalar","setRay","ray","getDimensions","portal","srcWidth","max","min","srcHeight","dstWidth","dst","dstHeight","updateLines","line1","geometry","attributes","array","needsUpdate","makeOutline","color","lineWidth","setAttribute","linewidth","makeLine","makePortal","srcDims","dstDims","portals","s","d","dx","dy","dw","dh","sx","sy","sw","sh","outline","occluder","scene","createPortal","visible","transparent","opacity","userData","kind","Uint8Array","scene2","colorWrite","srcOutline","outlinesVisible","scene3","dstOutline","maxOrder","length","renderOrder","minOrder","push","drawPointer","ray1","ray2","drawBox","diff","subVectors","applyOutlineVisible","canvas","renderer","scene4","raycaster","zoomRay","intersects","box","down","cameraDown","diffMouse","active","middle","colorMagenta","setIntersections","e","meshes","concat","setFromCamera","top","areas","indexOf","getSmallestTop","intersectObjects","intersect","object","ctrlKey","style","cursor","intersectIds","uuid","i","srcMesh","dstMesh","includes","setHex","Pointer","useEffect","pointerDown","clientX","clientY","setPointerDown","which","origin","setPointerCapture","pointerId","pointerMove","setX","setY","index","pointerUp","dims","releasePointerCapture","mouseWheel","visibleHeight","ratio","deltaY","prevScaleX","prevScaleY","nextScaleX","nextScaleY","diffx","rx","newRx","diffy","ry","newRy","newTexture","addEventListener","passive","removeEventListener","GitInfo","right","bottom","background","fontSize","lineHeight","href","rel","gitInfo","lastCommit","Keyboard","pressed","key","downHandler","press","toLowerCase","upHandler","Tips","left","paddingLeft","App","canvasRef","useRef","useState","loaded","setLoaded","current","setSize","autoClear","vector","animate","requestAnimationFrame","clear","render","copyFramebufferToTexture","clearDepth","aspect","updateProjectionMatrix","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.308aa21b.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { makeOutline } from \"./Actions\";\n\nexport type PointerType = {\n  mouse: THREE.Vector2;\n  clip: THREE.Vector3;\n  clip2: THREE.Vector2;\n  tempClip: THREE.Vector3;\n  ray: THREE.Vector3;\n  diff: THREE.Vector3;\n  diffMouse: THREE.Vector2;\n  active: boolean;\n  middle: boolean;\n  down: {\n    mouse: THREE.Vector2;\n    clip: THREE.Vector3;\n    clip2: THREE.Vector2;\n    tempClip: THREE.Vector3;\n    ray: THREE.Vector3;\n  };\n};\n\nexport type PortalType = {\n  line1: THREE.Line;\n  src: {\n    outline: THREE.Line;\n    occluder: THREE.Mesh;\n    mesh: THREE.Mesh;\n    min: THREE.Vector3;\n    max: THREE.Vector3;\n  };\n  dst: {\n    outline: THREE.Line;\n    occluder: THREE.Mesh;\n    scene: THREE.Scene;\n    mesh: THREE.Mesh;\n    min: THREE.Vector3;\n    max: THREE.Vector3;\n  };\n};\n\nexport type ImageType = {\n  mesh: THREE.Mesh;\n  material: THREE.MeshBasicMaterial;\n  geometry: THREE.PlaneGeometry;\n  box: THREE.Box3;\n  down: THREE.Vector3;\n};\n\ntype DrawBoxType = {\n  min: THREE.Vector3;\n  max: THREE.Vector3;\n  diff: THREE.Vector3;\n  outline: THREE.Line;\n};\n\ntype StateType = {\n  canvas: HTMLCanvasElement | null;\n  camera: THREE.PerspectiveCamera | null;\n  renderer: THREE.WebGLRenderer | null;\n  raycaster: THREE.Raycaster;\n  drawBox: DrawBoxType;\n  scene: THREE.Scene;\n  scene2: THREE.Scene;\n  scene3: THREE.Scene;\n  scene4: THREE.Scene;\n  outlinesVisible: boolean;\n  zoomRay: {\n    ray: THREE.Vector3;\n    tempClip: THREE.Vector3;\n    clip: THREE.Vector3;\n  };\n  pointer: PointerType;\n  intersects: Array<THREE.Object3D>;\n  image: ImageType;\n  cameraDown: THREE.Vector3;\n  portals: Array<PortalType>;\n};\n\nlet imageMesh, imageMeshMaterial, imageGeometry;\n{\n  const geometry = new THREE.PlaneGeometry();\n  const texture = new THREE.Texture();\n  const material = new THREE.MeshBasicMaterial({ map: texture });\n  const mesh = new THREE.Mesh(geometry, material);\n  imageGeometry = geometry;\n  imageMeshMaterial = material;\n  imageMesh = mesh;\n}\n\nconst State: StateType = {\n  canvas: null,\n  camera: null,\n  renderer: null,\n  scene: new THREE.Scene(),\n  scene2: new THREE.Scene(),\n  scene3: new THREE.Scene(),\n  scene4: new THREE.Scene(),\n  raycaster: new THREE.Raycaster(),\n  outlinesVisible: true,\n  zoomRay: {\n    clip: new THREE.Vector3(),\n    tempClip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n  },\n  drawBox: {\n    min: new THREE.Vector3(),\n    max: new THREE.Vector3(),\n    diff: new THREE.Vector3(),\n    outline: makeOutline(0xffffff, 2),\n  },\n  intersects: [],\n  image: {\n    mesh: imageMesh,\n    material: imageMeshMaterial,\n    geometry: imageGeometry,\n    box: new THREE.Box3(),\n    down: new THREE.Vector3(),\n  },\n  cameraDown: new THREE.Vector3(),\n  portals: [],\n  pointer: {\n    mouse: new THREE.Vector2(),\n    clip: new THREE.Vector3(),\n    clip2: new THREE.Vector2(),\n    tempClip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n    diffMouse: new THREE.Vector2(),\n    diff: new THREE.Vector3(),\n    active: false,\n    middle: false,\n    down: {\n      mouse: new THREE.Vector2(),\n      clip: new THREE.Vector3(),\n      clip2: new THREE.Vector2(),\n      tempClip: new THREE.Vector3(),\n      ray: new THREE.Vector3(),\n    },\n  },\n};\n\nexport default State;\n","export const outlineVertices = new Float32Array([\n  -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0, -0.5, -0.5, 0,\n]);\n","import * as THREE from \"three\";\nimport { outlineVertices } from \"./Constants\";\nimport State, { PointerType, PortalType, ImageType } from \"./State\";\n\nexport const getWorldPixelAtZ = (\n  z: number,\n  camera: THREE.PerspectiveCamera | null\n) => {\n  if (camera) {\n    const visibleHeight = 2 * Math.tan((camera.fov * Math.PI) / 360) * z;\n    // convert to ratio based on pixel\n    return visibleHeight / window.innerHeight;\n  } else {\n    return 1;\n  }\n};\n\nexport const setRay = (\n  target: THREE.Vector3,\n  tempClip: THREE.Vector3,\n  clip: THREE.Vector3,\n  camera: THREE.PerspectiveCamera | null,\n  projectToZ: number\n) => {\n  if (camera !== null) {\n    tempClip.copy(clip);\n    tempClip.unproject(camera);\n    tempClip.sub(camera.position).normalize();\n    const distance = (projectToZ - camera.position.z) / tempClip.z;\n    target.copy(camera.position).add(tempClip.multiplyScalar(distance));\n  }\n};\n\nexport const loadImage = async (image: ImageType, src: string) => {\n  const loader = new THREE.TextureLoader();\n  loader.load(src, function (texture) {\n    const img = texture.image;\n\n    // TODO temp scale down for bowie, usually 5\n    const worldPixel = getWorldPixelAtZ(1.5, State.camera);\n    const w = img.width * worldPixel;\n    const h = img.height * worldPixel;\n\n    image.mesh.scale.set(w, h, 1);\n    image.material.map = texture;\n  });\n};\n\nexport const setPointer = (pointer: PointerType, x: number, y: number) => {\n  pointer.mouse.set(x, y);\n  pointer.clip.set(\n    (x / window.innerWidth) * 2 - 1,\n    -(y / window.innerHeight) * 2 + 1,\n    0.5\n  );\n  pointer.clip2.set(pointer.clip.x, pointer.clip.y);\n  if (State.camera !== null) {\n    setRay(pointer.ray, pointer.tempClip, pointer.clip, State.camera, 0);\n  }\n};\n\nexport const setPointerDown = (pointer: PointerType) => {\n  // Assumes pointer is up to date\n  pointer.down.mouse.copy(pointer.mouse);\n  pointer.down.clip.copy(pointer.clip);\n  pointer.down.ray.copy(pointer.ray);\n};\n\nexport const getDimensions = (portal: PortalType) => {\n  const srcWidth = portal.src.max.x - portal.src.min.x;\n  const srcHeight = portal.src.max.y - portal.src.min.y;\n  const dstWidth = portal.dst.max.x - portal.dst.min.x;\n  const dstHeight = portal.dst.max.y - portal.dst.min.y;\n  return { srcWidth, srcHeight, dstWidth, dstHeight };\n};\n\nexport const updateLines = (portal: any) => {\n  portal.line1.geometry.attributes.position.array[0] =\n    portal.src.mesh.position.x;\n  portal.line1.geometry.attributes.position.array[1] =\n    portal.src.mesh.position.y;\n  portal.line1.geometry.attributes.position.array[3] =\n    portal.dst.mesh.position.x;\n  portal.line1.geometry.attributes.position.array[4] =\n    portal.dst.mesh.position.y;\n  portal.line1.geometry.attributes.position.needsUpdate = true;\n};\n\nexport const getTop = (meshes: Array<THREE.Object3D>) => {\n  if (meshes.length === 1) {\n    return meshes;\n  } else if (meshes.length === 0) {\n    return [];\n  } else {\n    const renderOrder = meshes.map((mesh) => mesh.renderOrder);\n    const max = Math.max(...renderOrder);\n    const maxIndex = renderOrder.indexOf(max);\n    return [meshes[maxIndex]];\n  }\n};\n\nexport const getSmallestTop = (meshes: Array<THREE.Object3D>) => {\n  if (meshes.length === 1) {\n    return meshes;\n  } else if (meshes.length === 0) {\n    return [];\n  } else {\n    const areas = meshes.map((mesh) => mesh.scale.x * mesh.scale.y);\n    const min = Math.min(...areas);\n    const minIndex = areas.indexOf(min);\n    // const renderOrder = meshes.map((mesh) => mesh.renderOrder);\n    // const max = Math.max(...renderOrder);\n    // const maxIndex = renderOrder.indexOf(max);\n    return [meshes[minIndex]];\n  }\n};\n\nexport const makeOutline = (color: any, lineWidth: number) => {\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(outlineVertices, 3)\n  );\n  const material = new THREE.LineBasicMaterial({\n    color: color,\n    linewidth: lineWidth,\n  });\n  const outline = new THREE.Line(geometry, material);\n  return outline;\n};\n\nconst makeLine = () => {\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array([-1, -1, 0, 1, 1, 0]), 3)\n  );\n  const material = new THREE.LineBasicMaterial({\n    color: 0xaaaaaa,\n    linewidth: 2,\n  });\n  return new THREE.Line(geometry, material);\n};\n\nexport const createPortal = (\n  s: Array<number>,\n  d: Array<number>\n): PortalType => {\n  const [dx, dy, dw, dh] = d;\n  const [sx, sy, sw, sh] = s;\n  return {\n    line1: makeLine(),\n    src: {\n      outline: makeOutline(0xaaaaaa, 2),\n      mesh: new THREE.Mesh(),\n      occluder: new THREE.Mesh(),\n      min: new THREE.Vector3(sx - sw / 2, sy - sh / 2, 0),\n      max: new THREE.Vector3(sx + sw / 2, sy + sh / 2, 0),\n    },\n    dst: {\n      outline: makeOutline(0xaaaaaa, 2),\n      mesh: new THREE.Mesh(),\n      scene: new THREE.Scene(),\n      occluder: new THREE.Mesh(),\n      min: new THREE.Vector3(dx - dw / 2, dy - dh / 2, 0),\n      max: new THREE.Vector3(dx + dw / 2, dy + dh / 2, 0),\n    },\n  };\n};\n\nexport const makePortal = (\n  srcDims: Array<number>,\n  dstDims: Array<number>,\n  portals: Array<PortalType>,\n  camera: THREE.Camera\n) => {\n  const portal = createPortal(srcDims, dstDims);\n\n  const { srcWidth, srcHeight, dstWidth, dstHeight } = getDimensions(portal);\n  const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n\n  // TODO hide line for now\n  portal.line1.visible = false;\n\n  const makeSrcTexture = () => {\n    return new THREE.DataTexture(\n      new Uint8Array((srcWidth / worldPixel) * (srcHeight / worldPixel) * 3),\n      srcWidth / worldPixel,\n      srcHeight / worldPixel,\n      THREE.RGBFormat\n    );\n  };\n\n  const x = portal.dst.min.x + dstWidth / 2;\n  const y = portal.dst.min.y + dstHeight / 2;\n\n  // set src mesh\n  {\n    const mesh = portal.src.mesh;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0,\n    });\n    mesh.geometry = geometry;\n    mesh.material = material;\n    mesh.userData.kind = \"src\";\n\n    mesh.scale.set(srcWidth, srcHeight, 1);\n    mesh.position.x = portal.src.min.x + srcWidth / 2;\n    mesh.position.y = portal.src.min.y + srcHeight / 2;\n\n    if (State.scene) State.scene.add(mesh);\n  }\n\n  const dstOffset = 0;\n\n  // set dst mesh\n  {\n    const texture = makeSrcTexture();\n    const mesh = portal.dst.mesh;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ map: texture });\n    mesh.userData.kind = \"dst\";\n    mesh.geometry = geometry;\n    mesh.material = material;\n\n    mesh.scale.set(dstWidth, dstHeight, 1);\n    mesh.position.x = x + dstOffset;\n    mesh.position.y = y + dstOffset;\n\n    portal.dst.scene.add(mesh);\n  }\n\n  // set dst line\n  State.scene2.add(portal.line1);\n\n  // set src occluder\n  {\n    const occluder = portal.src.occluder;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    occluder.geometry = geometry;\n    occluder.material = material;\n    occluder.scale.set(srcWidth, srcHeight, 1);\n    occluder.position.x = portal.src.min.x + srcWidth / 2;\n    occluder.position.y = portal.src.min.y + srcHeight / 2;\n    occluder.position.z = 0.00001;\n    occluder.material.colorWrite = false;\n    State.scene2.add(occluder);\n  }\n\n  // set dst occluder\n  {\n    const occluder = portal.dst.occluder;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    occluder.geometry = geometry;\n    occluder.material = material;\n    occluder.scale.set(dstWidth, dstHeight, 1);\n    occluder.position.x = portal.dst.min.x + dstWidth / 2 + dstOffset;\n    occluder.position.y = portal.dst.min.y + dstHeight / 2 + dstOffset;\n    occluder.position.z = 0.00001;\n    occluder.material.colorWrite = false;\n    State.scene2.add(occluder);\n  }\n\n  // set src outline\n  {\n    const srcOutline = portal.src.outline;\n    srcOutline.scale.set(srcWidth, srcHeight, 1);\n    srcOutline.position.x = portal.src.min.x + srcWidth / 2;\n    srcOutline.position.y = portal.src.min.y + srcHeight / 2;\n    srcOutline.visible = State.outlinesVisible;\n    State.scene3.add(portal.src.outline);\n  }\n\n  // set dst outline\n  {\n    const dstOutline = portal.dst.outline;\n    // @ts-ignore\n    dstOutline.material.lineWidth = 4;\n    // @ts-ignore\n    dstOutline.material.needsUpdate = true;\n    dstOutline.scale.set(dstWidth, dstHeight, 1);\n    dstOutline.position.x = portal.dst.min.x + dstWidth / 2 + dstOffset;\n    dstOutline.position.y = portal.dst.min.y + dstHeight / 2 + dstOffset;\n    dstOutline.visible = State.outlinesVisible;\n    // portal.dst.scene.add(portal.dst.outline);\n    State.scene3.add(portal.dst.outline);\n  }\n\n  const maxOrder =\n    portals.length > 0\n      ? Math.max(...portals.map((portal) => portal.src.mesh.renderOrder)) + 1\n      : 0;\n\n  const minOrder =\n    portals.length > 0\n      ? Math.min(...portals.map((portal) => portal.dst.outline.renderOrder)) - 1\n      : 999;\n\n  portal.src.mesh.renderOrder = maxOrder;\n  portal.dst.mesh.renderOrder = maxOrder + 1;\n\n  portal.line1.renderOrder = minOrder;\n  portal.src.occluder.renderOrder = minOrder - 1;\n  portal.dst.occluder.renderOrder = minOrder - 2;\n  portal.src.outline.renderOrder = minOrder - 3;\n\n  portal.dst.outline.renderOrder = minOrder - 2;\n\n  State.portals.push(portal);\n\n  updateLines(portal);\n};\n\nexport const drawPointer = (ray1: THREE.Vector3, ray2: THREE.Vector3) => {\n  const { outline, min, max, diff } = State.drawBox;\n  outline.visible = true;\n  min.copy(ray1).min(ray2);\n  max.copy(ray1).max(ray2);\n  diff.subVectors(max, min);\n  outline.position.x = min.x + diff.x / 2;\n  outline.position.y = min.y + diff.y / 2;\n  outline.scale.x = diff.x;\n  outline.scale.y = diff.y;\n};\n\nexport const applyOutlineVisible = () => {\n  for (let portal of State.portals) {\n    portal.src.outline.visible = State.outlinesVisible;\n    portal.dst.outline.visible = State.outlinesVisible;\n  }\n};\n\nexport const toggleOutlines = () => {\n  State.outlinesVisible = !State.outlinesVisible;\n  applyOutlineVisible();\n};\n","import { useEffect } from \"react\";\nimport State from \"./State\";\nimport * as THREE from \"three\";\nimport {\n  setPointer,\n  setPointerDown,\n  getWorldPixelAtZ,\n  updateLines,\n  getSmallestTop,\n  drawPointer,\n  makePortal,\n  getDimensions,\n} from \"./Actions\";\n\n// const colorCyan = new THREE.Color(\"rgb(152, 215, 170)\");\nconst colorMagenta = new THREE.Color(\"rgb(238, 88, 181)\");\n\nconst setIntersections = (pointer: any, e: any) => {\n  const { portals, raycaster, camera, canvas } = State;\n  if (camera && canvas) {\n    const meshes = portals\n      .map((portal) => portal.dst.mesh)\n      .concat(portals.map((portal) => portal.src.mesh));\n\n    raycaster.setFromCamera(pointer.clip2, camera);\n    const intersects = State.raycaster\n      .intersectObjects(meshes)\n      .map((intersect) => intersect.object);\n\n    const top = getSmallestTop(intersects);\n\n    State.intersects = top;\n    if (e.ctrlKey) State.intersects = [];\n\n    if (State.intersects.length > 0) {\n      canvas.style.cursor = \"default\";\n    } else {\n      canvas.style.cursor = \"crosshair\";\n    }\n\n    const intersectIds = State.intersects.map((intersect) => intersect.uuid);\n    for (let i = 0; i < portals.length; i++) {\n      const portal = portals[i];\n      const srcMesh = portal.src.mesh;\n      const dstMesh = portal.dst.mesh;\n      if (\n        intersectIds.includes(srcMesh.uuid) ||\n        intersectIds.includes(dstMesh.uuid)\n      ) {\n        // @ts-ignore\n        portal.src.outline.material.color.set(0x00ffff);\n        portal.src.outline.visible = true;\n        // @ts-ignore\n        portal.dst.outline.material.color.set(0xff00ff);\n        portal.dst.outline.visible = true;\n        // @ts-ignore\n        portal.line1.material.color.set(colorMagenta);\n        // portal.src.outline.visible = true;\n        // portal.dst.outline.visible = true;\n        // portal.line1.visible = true;\n      } else {\n        // @ts-ignore\n        portal.src.outline.material.color.setHex(0xaaaaaa);\n        portal.src.outline.visible = State.outlinesVisible;\n        // @ts-ignore\n        portal.dst.outline.material.color.setHex(0xaaaaaa);\n        portal.dst.outline.visible = State.outlinesVisible;\n        // @ts-ignore\n        portal.line1.material.color.setHex(0xaaaaaa);\n        // portal.src.outline.visible = false;\n        // portal.dst.outline.visible = false;\n        // portal.line1.visible = false;\n      }\n    }\n  }\n};\n\nconst Pointer = () => {\n  useEffect(() => {\n    const { canvas, pointer, camera, cameraDown, image, portals } = State;\n    if (canvas && camera) {\n      const pointerDown = (e: PointerEvent) => {\n        setPointer(pointer, e.clientX, e.clientY);\n        setPointerDown(pointer);\n        image.down.copy(image.mesh.position);\n        cameraDown.copy(camera.position);\n        pointer.active = true;\n        pointer.middle = e.which === 2;\n\n        setIntersections(pointer, e);\n\n        if (State.intersects.length > 0 && !e.ctrlKey) {\n          const mesh = State.intersects[0];\n          mesh.userData.origin = new THREE.Vector3();\n          mesh.userData.origin.copy(mesh.position);\n        } else {\n          drawPointer(pointer.down.ray, pointer.ray);\n        }\n\n        canvas.setPointerCapture(e.pointerId);\n      };\n\n      const pointerMove = (e: PointerEvent) => {\n        setPointer(pointer, e.clientX, e.clientY);\n\n        if (pointer.active) {\n          pointer.diffMouse.copy(pointer.mouse).sub(pointer.down.mouse);\n          const worldPixel = getWorldPixelAtZ(camera.position.z, camera);\n          const dx = pointer.diffMouse.x * worldPixel;\n          const dy = pointer.diffMouse.y * worldPixel;\n\n          if (pointer.middle) {\n            // pan when mousewheel button is pressed\n            // pan actually means ove image\n            image.mesh.position.setX(image.down.x + dx);\n            image.mesh.position.setY(image.down.y - dy);\n          } else {\n            if (State.drawBox.outline.visible) {\n              drawPointer(pointer.down.ray, pointer.ray);\n            } else if (State.intersects.length > 0) {\n              const mesh = State.intersects[0];\n              if (mesh.userData.kind === \"dst\") {\n                const index = portals\n                  .map((portal) => portal.dst.mesh.uuid)\n                  .indexOf(mesh.uuid);\n                const portal = portals[index];\n                mesh.position.setX(mesh.userData.origin.x + dx);\n                mesh.position.setY(mesh.userData.origin.y - dy);\n                const x = mesh.userData.origin.x + dx;\n                const y = mesh.userData.origin.y - dy;\n                portal.dst.min.setX(x - mesh.scale.x / 2);\n                portal.dst.min.setY(y - mesh.scale.y / 2);\n                portal.dst.max.setX(x + mesh.scale.x / 2);\n                portal.dst.max.setY(y + mesh.scale.y / 2);\n\n                portals[index].dst.occluder.position.setX(x);\n                portals[index].dst.occluder.position.setY(y);\n                portals[index].dst.outline.position.setX(x);\n                portals[index].dst.outline.position.setY(y);\n\n                updateLines(portal);\n              } else if (mesh.userData.kind === \"src\") {\n                const index = portals\n                  .map((portal) => portal.src.mesh.uuid)\n                  .indexOf(mesh.uuid);\n                const portal = portals[index];\n                const x = mesh.userData.origin.x + dx;\n                const y = mesh.userData.origin.y - dy;\n                mesh.position.setX(x);\n                mesh.position.setY(y);\n                portal.src.min.setX(x - mesh.scale.x / 2);\n                portal.src.min.setY(y - mesh.scale.y / 2);\n                portal.src.max.setX(x + mesh.scale.x / 2);\n                portal.src.max.setY(y + mesh.scale.y / 2);\n\n                portals[index].src.occluder.position.setX(x);\n                portals[index].src.occluder.position.setY(y);\n                portals[index].src.outline.position.setX(x);\n                portals[index].src.outline.position.setY(y);\n\n                portal.src.outline.position.setX(mesh.userData.origin.x + dx);\n                portal.src.outline.position.setY(mesh.userData.origin.y - dy);\n\n                updateLines(portal);\n              }\n            }\n          }\n        } else {\n          setIntersections(pointer, e);\n        }\n      };\n\n      const pointerUp = (e: PointerEvent) => {\n        pointer.active = false;\n        pointer.middle = false;\n\n        if (State.drawBox.outline.visible === true) {\n          const width = State.drawBox.diff.x;\n          const height = State.drawBox.diff.y;\n          const dims = [\n            State.drawBox.min.x + width / 2,\n            State.drawBox.min.y + height / 2,\n            width,\n            height,\n          ];\n          if (State.scene2) {\n            makePortal(dims, dims, State.portals, camera);\n            State.drawBox.outline.visible = false;\n          }\n        }\n\n        canvas.releasePointerCapture(e.pointerId);\n      };\n\n      const mouseWheel = (e: Event) => {\n        const visibleHeight = window.innerHeight;\n        // @ts-ignore\n        const adjusted = visibleHeight + e.deltaY;\n        const ratio = visibleHeight / adjusted;\n\n        if (State.intersects.length > 0) {\n          for (let mesh of State.intersects) {\n            // if (group.userData.selected) {\n            const prevScaleX = mesh.scale.x;\n            const prevScaleY = mesh.scale.y;\n            const nextScaleX = prevScaleX * ratio;\n            const nextScaleY = prevScaleY * ratio;\n\n            const diffx = pointer.ray.x - mesh.position.x;\n            const rx = diffx / prevScaleX;\n            const newRx = diffx / nextScaleX;\n            const x = mesh.position.x + (newRx - rx) * nextScaleX;\n\n            const diffy = pointer.ray.y - mesh.position.y;\n            const ry = diffy / prevScaleY;\n            const newRy = diffy / nextScaleY;\n            const y = mesh.position.y + (newRy - ry) * nextScaleY;\n\n            mesh.position.x = x;\n            mesh.position.y = y;\n            mesh.scale.multiplyScalar(ratio);\n\n            if (mesh.userData.kind === \"dst\") {\n              const index = portals\n                .map((portal) => portal.dst.mesh.uuid)\n                .indexOf(mesh.uuid);\n              const portal = portals[index];\n              portals[index].dst.occluder.position.setX(x);\n              portals[index].dst.occluder.position.setY(y);\n              portals[index].dst.outline.position.setX(x);\n              portals[index].dst.outline.position.setY(y);\n              portals[index].dst.outline.scale.copy(mesh.scale);\n              portals[index].dst.occluder.scale.copy(mesh.scale);\n\n              portal.dst.min.setX(x - mesh.scale.x / 2);\n              portal.dst.min.setY(y - mesh.scale.y / 2);\n              portal.dst.max.setX(x + mesh.scale.x / 2);\n              portal.dst.max.setY(y + mesh.scale.y / 2);\n\n              updateLines(portal);\n            } else if (mesh.userData.kind === \"src\") {\n              const index = portals\n                .map((portal) => portal.src.mesh.uuid)\n                .indexOf(mesh.uuid);\n              const portal = portals[index];\n              mesh.position.setX(x);\n              mesh.position.setY(y);\n              portals[index].src.occluder.position.setX(x);\n              portals[index].src.occluder.position.setY(y);\n              portals[index].src.outline.position.setX(x);\n              portals[index].src.outline.position.setY(y);\n\n              portal.src.outline.position.setX(x);\n              portal.src.outline.position.setY(y);\n\n              portals[index].src.outline.scale.copy(mesh.scale);\n              portals[index].src.occluder.scale.copy(mesh.scale);\n\n              portal.src.min.setX(x - mesh.scale.x / 2);\n              portal.src.min.setY(y - mesh.scale.y / 2);\n              portal.src.max.setX(x + mesh.scale.x / 2);\n              portal.src.max.setY(y + mesh.scale.y / 2);\n\n              const { srcWidth, srcHeight } = getDimensions(portal);\n              const worldPixel = getWorldPixelAtZ(\n                camera.position.z,\n                State.camera\n              );\n              const makeSrcTexture = () => {\n                return new THREE.DataTexture(\n                  new Uint8Array(\n                    (srcWidth / worldPixel) * (srcHeight / worldPixel) * 3\n                  ),\n                  srcWidth / worldPixel,\n                  srcHeight / worldPixel,\n                  THREE.RGBFormat\n                );\n              };\n              const newTexture = makeSrcTexture();\n              // @ts-ignore\n              portal.dst.mesh.material.map = newTexture;\n\n              updateLines(portal);\n            }\n          }\n        } else {\n          const prevScaleX = image.mesh.scale.x;\n          const prevScaleY = image.mesh.scale.y;\n          const nextScaleX = prevScaleX * ratio;\n          const nextScaleY = prevScaleY * ratio;\n\n          const diffx = pointer.ray.x - image.mesh.position.x;\n          const rx = diffx / prevScaleX;\n          const newRx = diffx / nextScaleX;\n          const x = image.mesh.position.x + (newRx - rx) * nextScaleX;\n\n          const diffy = pointer.ray.y - image.mesh.position.y;\n          const ry = diffy / prevScaleY;\n          const newRy = diffy / nextScaleY;\n          const y = image.mesh.position.y + (newRy - ry) * nextScaleY;\n\n          image.mesh.position.x = x;\n          image.mesh.position.y = y;\n          image.mesh.scale.multiplyScalar(ratio);\n        }\n      };\n\n      canvas.addEventListener(\"pointerdown\", pointerDown);\n      canvas.addEventListener(\"pointermove\", pointerMove);\n      canvas.addEventListener(\"pointerup\", pointerUp);\n      canvas.addEventListener(\"pointercancel\", pointerUp);\n      canvas.addEventListener(\"mousewheel\", mouseWheel, { passive: false });\n      return () => {\n        canvas.removeEventListener(\"pointerdown\", pointerDown);\n        canvas.removeEventListener(\"pointermove\", pointerMove);\n        canvas.removeEventListener(\"pointerup\", pointerUp);\n        canvas.removeEventListener(\"pointercancel\", pointerUp);\n        canvas.removeEventListener(\"mousewheel\", mouseWheel);\n      };\n    }\n  }, []);\n\n  return null;\n};\n\nexport default Pointer;\n","import gitInfo from \"./gitInfo.json\";\n\nconst GitInfo = () => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        right: 0,\n        bottom: 0,\n        background: \"white\",\n        color: \"black\",\n        fontSize: 13,\n        lineHeight: 1.2,\n      }}\n    >\n      Under construction\n      <br />\n      <a\n        href=\"https://github.com/constraint-systems/portal\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {gitInfo.lastCommit}\n      </a>\n    </div>\n  );\n};\n\nexport default GitInfo;\n","import { useEffect } from \"react\";\nimport { getWorldPixelAtZ, toggleOutlines } from \"./Actions\";\nimport State from \"./State\";\n\nfunction Keyboard() {\n  useEffect(() => {\n    const pressed = (key: string) => {\n      if (State.camera) {\n        const worldPixel = getWorldPixelAtZ(\n          State.camera.position.z,\n          State.camera\n        );\n        if (key === \"arrowdown\") {\n          State.image.mesh.position.y -= worldPixel * 32;\n        } else if (key === \"arrowup\") {\n          State.image.mesh.position.y += worldPixel * 32;\n        } else if (key === \"arrowleft\") {\n          State.image.mesh.position.x -= worldPixel * 32;\n        } else if (key === \"arrowright\") {\n          State.image.mesh.position.x += worldPixel * 32;\n        } else if (key === \";\") {\n          toggleOutlines();\n        } else if (key === \"control\") {\n          if (State.canvas) State.canvas.style.cursor = \"crosshair\";\n        }\n      }\n    };\n\n    const downHandler = (e: KeyboardEvent) => {\n      let press = e.key.toLowerCase();\n      pressed(press);\n    };\n\n    const upHandler = (e: KeyboardEvent) => {\n      // let press = e.key.toLowerCase();\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []);\n\n  return null;\n}\n\nexport default Keyboard;\n","const Tips = () => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        left: 0,\n        bottom: 0,\n        background: \"white\",\n        color: \"black\",\n        fontSize: 13,\n        lineHeight: 1.2,\n        paddingLeft: \"0.5ch\",\n      }}\n    >\n      ; - toggle outlines\n    </div>\n  );\n};\n\nexport default Tips;\n","import { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport State from \"./State\";\nimport Pointer from \"./Pointer\";\nimport { applyOutlineVisible, getWorldPixelAtZ, loadImage } from \"./Actions\";\nimport GitInfo from \"./GitInfo\";\nimport Keyboard from \"./Keyboard\";\nimport Tips from \"./Tips\";\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    State.canvas = canvas;\n\n    if (canvas !== null) {\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      State.camera = camera;\n\n      const renderer = new THREE.WebGLRenderer({ canvas: canvas });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.autoClear = false;\n      State.renderer = renderer;\n\n      setLoaded(true);\n\n      State.scene.add(State.image.mesh);\n      loadImage(State.image, \"bowiebig.png\");\n\n      camera.position.z = 5;\n\n      State.drawBox.outline.visible = false;\n      State.drawBox.outline.renderOrder = 999;\n      State.scene3.add(State.drawBox.outline);\n\n      const vector = new THREE.Vector2();\n\n      applyOutlineVisible();\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n\n        renderer.clear();\n        renderer.render(State.scene, camera);\n\n        const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n        for (let i = 0; i < State.portals.length; i++) {\n          const portal = State.portals[i];\n          vector.x = portal.src.min.x / worldPixel + window.innerWidth / 2;\n          vector.y = portal.src.min.y / worldPixel + window.innerHeight / 2;\n\n          renderer.copyFramebufferToTexture(\n            vector,\n            // @ts-ignore\n            portal.dst.mesh.material.map\n          );\n          renderer.render(portal.dst.scene, camera);\n        }\n\n        renderer.render(State.scene2, camera);\n        renderer.clearDepth();\n        renderer.render(State.scene3, camera);\n      };\n      animate();\n    }\n  }, []);\n\n  useEffect(() => {\n    const { camera, renderer } = State;\n    if (camera && renderer) {\n      const handleResize = () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      };\n      window.addEventListener(\"resize\", handleResize);\n    }\n  }, []);\n\n  return (\n    <>\n      <canvas ref={canvasRef}></canvas>\n      {loaded ? (\n        <>\n          <Pointer />\n          <Keyboard />\n          <Tips />\n        </>\n      ) : null}\n      <GitInfo />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}