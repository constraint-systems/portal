{"version":3,"sources":["State.tsx","Constants.js","Actions.tsx","Pointer.tsx","GitInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["imageMesh","imageMeshMaterial","imageGeometry","outlineVertices","Float32Array","getWorldPixelAtZ","z","camera","Math","tan","fov","PI","window","innerHeight","loadImage","image","src","a","THREE","load","texture","img","worldPixel","State","w","width","h","height","mesh","scale","set","material","map","setPointer","pointer","x","y","mouse","clip","innerWidth","clip2","target","tempClip","projectToZ","copy","unproject","sub","position","normalize","distance","add","multiplyScalar","setRay","ray","getDimensions","portal","srcWidth","max","min","srcHeight","dstWidth","dst","dstHeight","updateLines","line1","geometry","attributes","array","needsUpdate","makeOutline","color","lineWidth","setAttribute","linewidth","makeLine","makePortal","srcDims","dstDims","portals","s","d","dx","dy","dw","dh","sx","sy","sw","sh","outline","occluder","scene","createPortal","transparent","opacity","userData","kind","Uint8Array","scene2","colorWrite","srcOutline","dstOutline","maxOrder","length","renderOrder","minOrder","push","drawPointer","ray1","ray2","drawBox","diff","visible","subVectors","canvas","renderer","scene3","scene4","raycaster","zoomRay","intersects","box","down","cameraDown","diffMouse","active","colorMagenta","setIntersections","meshes","concat","setFromCamera","top","indexOf","getTop","intersectObjects","intersect","object","style","cursor","intersectIds","uuid","i","srcMesh","dstMesh","includes","setHex","Pointer","useEffect","pointerDown","e","clientX","clientY","setPointerDown","origin","setPointerCapture","pointerId","pointerMove","index","setX","setY","pointerUp","dims","releasePointerCapture","mouseWheel","visibleHeight","ratio","deltaY","prevScaleX","prevScaleY","nextScaleX","nextScaleY","diffx","rx","newRx","diffy","ry","newRy","newTexture","addEventListener","passive","removeEventListener","GitInfo","right","bottom","background","fontSize","lineHeight","href","rel","gitInfo","lastCommit","App","canvasRef","useRef","useState","loaded","setLoaded","current","setSize","autoClear","vector","animate","requestAnimationFrame","clear","render","copyFramebufferToTexture","clearDepth","aspect","updateProjectionMatrix","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7824a6a.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { makeOutline } from \"./Actions\";\n\nexport type PointerType = {\n  mouse: THREE.Vector2;\n  clip: THREE.Vector3;\n  clip2: THREE.Vector2;\n  tempClip: THREE.Vector3;\n  ray: THREE.Vector3;\n  diff: THREE.Vector3;\n  diffMouse: THREE.Vector2;\n  active: boolean;\n  down: {\n    mouse: THREE.Vector2;\n    clip: THREE.Vector3;\n    clip2: THREE.Vector2;\n    tempClip: THREE.Vector3;\n    ray: THREE.Vector3;\n  };\n};\n\nexport type PortalType = {\n  line1: THREE.Line;\n  src: {\n    outline: THREE.Line;\n    occluder: THREE.Mesh;\n    mesh: THREE.Mesh;\n    min: THREE.Vector3;\n    max: THREE.Vector3;\n  };\n  dst: {\n    outline: THREE.Line;\n    occluder: THREE.Mesh;\n    scene: THREE.Scene;\n    mesh: THREE.Mesh;\n    min: THREE.Vector3;\n    max: THREE.Vector3;\n  };\n};\n\nexport type ImageType = {\n  mesh: THREE.Mesh;\n  material: THREE.MeshBasicMaterial;\n  geometry: THREE.PlaneGeometry;\n  box: THREE.Box3;\n  down: THREE.Vector3;\n};\n\ntype DrawBoxType = {\n  min: THREE.Vector3;\n  max: THREE.Vector3;\n  diff: THREE.Vector3;\n  outline: THREE.Line;\n};\n\ntype StateType = {\n  canvas: HTMLCanvasElement | null;\n  camera: THREE.PerspectiveCamera | null;\n  renderer: THREE.WebGLRenderer | null;\n  raycaster: THREE.Raycaster;\n  drawBox: DrawBoxType;\n  scene: THREE.Scene;\n  scene2: THREE.Scene;\n  scene3: THREE.Scene;\n  scene4: THREE.Scene;\n  zoomRay: {\n    ray: THREE.Vector3;\n    tempClip: THREE.Vector3;\n    clip: THREE.Vector3;\n  };\n  pointer: PointerType;\n  intersects: Array<THREE.Object3D>;\n  image: ImageType;\n  cameraDown: THREE.Vector3;\n  portals: Array<PortalType>;\n};\n\nlet imageMesh, imageMeshMaterial, imageGeometry;\n{\n  const geometry = new THREE.PlaneGeometry();\n  const texture = new THREE.Texture();\n  const material = new THREE.MeshBasicMaterial({ map: texture });\n  const mesh = new THREE.Mesh(geometry, material);\n  imageGeometry = geometry;\n  imageMeshMaterial = material;\n  imageMesh = mesh;\n}\n\nconst State: StateType = {\n  canvas: null,\n  camera: null,\n  renderer: null,\n  scene: new THREE.Scene(),\n  scene2: new THREE.Scene(),\n  scene3: new THREE.Scene(),\n  scene4: new THREE.Scene(),\n  raycaster: new THREE.Raycaster(),\n  zoomRay: {\n    clip: new THREE.Vector3(),\n    tempClip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n  },\n  drawBox: {\n    min: new THREE.Vector3(),\n    max: new THREE.Vector3(),\n    diff: new THREE.Vector3(),\n    outline: makeOutline(0xffffff, 2),\n  },\n  intersects: [],\n  image: {\n    mesh: imageMesh,\n    material: imageMeshMaterial,\n    geometry: imageGeometry,\n    box: new THREE.Box3(),\n    down: new THREE.Vector3(),\n  },\n  cameraDown: new THREE.Vector3(),\n  portals: [],\n  pointer: {\n    mouse: new THREE.Vector2(),\n    clip: new THREE.Vector3(),\n    clip2: new THREE.Vector2(),\n    tempClip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n    diffMouse: new THREE.Vector2(),\n    diff: new THREE.Vector3(),\n    active: false,\n    down: {\n      mouse: new THREE.Vector2(),\n      clip: new THREE.Vector3(),\n      clip2: new THREE.Vector2(),\n      tempClip: new THREE.Vector3(),\n      ray: new THREE.Vector3(),\n    },\n  },\n};\n\nexport default State;\n","export const outlineVertices = new Float32Array([\n  -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0, -0.5, -0.5, 0,\n]);\n","import * as THREE from \"three\";\nimport { outlineVertices } from \"./Constants\";\nimport State, { PointerType, PortalType, ImageType } from \"./State\";\n\nexport const getWorldPixelAtZ = (\n  z: number,\n  camera: THREE.PerspectiveCamera | null\n) => {\n  if (camera) {\n    const visibleHeight = 2 * Math.tan((camera.fov * Math.PI) / 360) * z;\n    // convert to ratio based on pixel\n    return visibleHeight / window.innerHeight;\n  } else {\n    return 1;\n  }\n};\n\nexport const setRay = (\n  target: THREE.Vector3,\n  tempClip: THREE.Vector3,\n  clip: THREE.Vector3,\n  camera: THREE.PerspectiveCamera | null,\n  projectToZ: number\n) => {\n  if (camera !== null) {\n    tempClip.copy(clip);\n    tempClip.unproject(camera);\n    tempClip.sub(camera.position).normalize();\n    const distance = (projectToZ - camera.position.z) / tempClip.z;\n    target.copy(camera.position).add(tempClip.multiplyScalar(distance));\n  }\n};\n\nexport const loadImage = async (image: ImageType, src: string) => {\n  const loader = new THREE.TextureLoader();\n  loader.load(src, function (texture) {\n    const img = texture.image;\n\n    const worldPixel = getWorldPixelAtZ(5, State.camera);\n    const w = img.width * worldPixel;\n    const h = img.height * worldPixel;\n\n    image.mesh.scale.set(w, h, 1);\n    image.material.map = texture;\n  });\n};\n\nexport const setPointer = (pointer: PointerType, x: number, y: number) => {\n  pointer.mouse.set(x, y);\n  pointer.clip.set(\n    (x / window.innerWidth) * 2 - 1,\n    -(y / window.innerHeight) * 2 + 1,\n    0.5\n  );\n  pointer.clip2.set(pointer.clip.x, pointer.clip.y);\n  if (State.camera !== null) {\n    setRay(pointer.ray, pointer.tempClip, pointer.clip, State.camera, 0);\n  }\n};\n\nexport const setPointerDown = (pointer: PointerType) => {\n  // Assumes pointer is up to date\n  pointer.down.mouse.copy(pointer.mouse);\n  pointer.down.clip.copy(pointer.clip);\n  pointer.down.ray.copy(pointer.ray);\n};\n\nexport const getDimensions = (portal: PortalType) => {\n  const srcWidth = portal.src.max.x - portal.src.min.x;\n  const srcHeight = portal.src.max.y - portal.src.min.y;\n  const dstWidth = portal.dst.max.x - portal.dst.min.x;\n  const dstHeight = portal.dst.max.y - portal.dst.min.y;\n  return { srcWidth, srcHeight, dstWidth, dstHeight };\n};\n\nexport const updateLines = (portal: any) => {\n  portal.line1.geometry.attributes.position.array[0] =\n    portal.src.mesh.position.x;\n  portal.line1.geometry.attributes.position.array[1] =\n    portal.src.mesh.position.y;\n  portal.line1.geometry.attributes.position.array[3] =\n    portal.dst.mesh.position.x;\n  portal.line1.geometry.attributes.position.array[4] =\n    portal.dst.mesh.position.y;\n  portal.line1.geometry.attributes.position.needsUpdate = true;\n};\n\nexport const getTop = (meshes: Array<THREE.Object3D>) => {\n  if (meshes.length === 1) {\n    return meshes;\n  } else if (meshes.length === 0) {\n    return [];\n  } else {\n    const renderOrder = meshes.map((mesh) => mesh.renderOrder);\n    const max = Math.max(...renderOrder);\n    const maxIndex = renderOrder.indexOf(max);\n    return [meshes[maxIndex]];\n  }\n};\n\nexport const makeOutline = (color: any, lineWidth: number) => {\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(outlineVertices, 3)\n  );\n  const material = new THREE.LineBasicMaterial({\n    color: color,\n    linewidth: lineWidth,\n  });\n  const outline = new THREE.Line(geometry, material);\n  return outline;\n};\n\nconst makeLine = () => {\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array([-1, -1, 0, 1, 1, 0]), 3)\n  );\n  const material = new THREE.LineBasicMaterial({\n    color: 0xaaaaaa,\n    linewidth: 2,\n  });\n  return new THREE.Line(geometry, material);\n};\n\nexport const createPortal = (\n  s: Array<number>,\n  d: Array<number>\n): PortalType => {\n  const [dx, dy, dw, dh] = d;\n  const [sx, sy, sw, sh] = s;\n  return {\n    line1: makeLine(),\n    src: {\n      outline: makeOutline(0xaaaaaa, 2),\n      mesh: new THREE.Mesh(),\n      occluder: new THREE.Mesh(),\n      min: new THREE.Vector3(sx - sw / 2, sy - sh / 2, 0),\n      max: new THREE.Vector3(sx + sw / 2, sy + sh / 2, 0),\n    },\n    dst: {\n      outline: makeOutline(0xaaaaaa, 4),\n      mesh: new THREE.Mesh(),\n      scene: new THREE.Scene(),\n      occluder: new THREE.Mesh(),\n      min: new THREE.Vector3(dx - dw / 2, dy - dh / 2, 0),\n      max: new THREE.Vector3(dx + dw / 2, dy + dh / 2, 0),\n    },\n  };\n};\n\nexport const makePortal = (\n  srcDims: Array<number>,\n  dstDims: Array<number>,\n  portals: Array<PortalType>,\n  camera: THREE.Camera\n) => {\n  const portal = createPortal(srcDims, dstDims);\n\n  const { srcWidth, srcHeight, dstWidth, dstHeight } = getDimensions(portal);\n  const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n\n  const makeSrcTexture = () => {\n    return new THREE.DataTexture(\n      new Uint8Array((srcWidth / worldPixel) * (srcHeight / worldPixel) * 3),\n      srcWidth / worldPixel,\n      srcHeight / worldPixel,\n      THREE.RGBFormat\n    );\n  };\n\n  const x = portal.dst.min.x + dstWidth / 2;\n  const y = portal.dst.min.y + dstHeight / 2;\n\n  // set src mesh\n  {\n    const mesh = portal.src.mesh;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      transparent: true,\n      opacity: 0,\n    });\n    mesh.geometry = geometry;\n    mesh.material = material;\n    mesh.userData.kind = \"src\";\n\n    mesh.scale.set(srcWidth, srcHeight, 1);\n    mesh.position.x = portal.src.min.x + srcWidth / 2;\n    mesh.position.y = portal.src.min.y + srcHeight / 2;\n\n    if (State.scene) State.scene.add(mesh);\n  }\n\n  // set dst mesh\n  {\n    const texture = makeSrcTexture();\n    const mesh = portal.dst.mesh;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ map: texture });\n    mesh.userData.kind = \"dst\";\n    mesh.geometry = geometry;\n    mesh.material = material;\n\n    mesh.scale.set(dstWidth, dstHeight, 1);\n    mesh.position.x = x;\n    mesh.position.y = y;\n\n    portal.dst.scene.add(mesh);\n  }\n\n  // set dst line\n  State.scene2.add(portal.line1);\n\n  // set src occluder\n  {\n    const occluder = portal.src.occluder;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    occluder.geometry = geometry;\n    occluder.material = material;\n    occluder.scale.set(srcWidth, srcHeight, 1);\n    occluder.position.x = portal.src.min.x + srcWidth / 2;\n    occluder.position.y = portal.src.min.y + srcHeight / 2;\n    occluder.position.z = 0.00001;\n    occluder.material.colorWrite = false;\n    State.scene2.add(occluder);\n  }\n\n  // set dst occluder\n  {\n    const occluder = portal.dst.occluder;\n    const geometry = new THREE.PlaneGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    occluder.geometry = geometry;\n    occluder.material = material;\n    occluder.scale.set(dstWidth, dstHeight, 1);\n    occluder.position.x = portal.dst.min.x + dstWidth / 2;\n    occluder.position.y = portal.dst.min.y + dstHeight / 2;\n    occluder.position.z = 0.00001;\n    occluder.material.colorWrite = false;\n    State.scene2.add(occluder);\n  }\n\n  // set src outline\n  {\n    const srcOutline = portal.src.outline;\n    srcOutline.scale.set(srcWidth, srcHeight, 1);\n    srcOutline.position.x = portal.src.min.x + srcWidth / 2;\n    srcOutline.position.y = portal.src.min.y + srcHeight / 2;\n    portal.dst.scene.add(portal.src.outline);\n  }\n\n  // set dst outline\n  {\n    const dstOutline = portal.dst.outline;\n    // @ts-ignore\n    dstOutline.material.lineWidth = 4;\n    // @ts-ignore\n    dstOutline.material.needsUpdate = true;\n    dstOutline.scale.set(dstWidth, dstHeight, 1);\n    dstOutline.position.x = portal.dst.min.x + dstWidth / 2;\n    dstOutline.position.y = portal.dst.min.y + dstHeight / 2;\n    portal.dst.scene.add(portal.dst.outline);\n  }\n\n  const maxOrder =\n    portals.length > 0\n      ? Math.max(...portals.map((portal) => portal.src.mesh.renderOrder)) + 1\n      : 0;\n\n  const minOrder =\n    portals.length > 0\n      ? Math.min(...portals.map((portal) => portal.dst.outline.renderOrder)) - 1\n      : 999;\n\n  portal.src.mesh.renderOrder = maxOrder;\n  portal.dst.mesh.renderOrder = maxOrder + 1;\n\n  portal.line1.renderOrder = minOrder;\n  portal.src.occluder.renderOrder = minOrder - 1;\n  portal.dst.occluder.renderOrder = minOrder - 2;\n\n  portal.src.outline.renderOrder = minOrder - 1;\n  portal.dst.outline.renderOrder = minOrder - 2;\n\n  State.portals.push(portal);\n\n  updateLines(portal);\n};\n\nexport const drawPointer = (ray1: THREE.Vector3, ray2: THREE.Vector3) => {\n  const { outline, min, max, diff } = State.drawBox;\n  outline.visible = true;\n  min.copy(ray1).min(ray2);\n  max.copy(ray1).max(ray2);\n  diff.subVectors(max, min);\n  outline.position.x = min.x + diff.x / 2;\n  outline.position.y = min.y + diff.y / 2;\n  outline.scale.x = diff.x;\n  outline.scale.y = diff.y;\n};\n","import { useEffect } from \"react\";\nimport State from \"./State\";\nimport * as THREE from \"three\";\nimport {\n  setPointer,\n  setPointerDown,\n  getWorldPixelAtZ,\n  updateLines,\n  getTop,\n  drawPointer,\n  makePortal,\n  getDimensions,\n} from \"./Actions\";\n\n// const colorCyan = new THREE.Color(\"rgb(152, 215, 170)\");\nconst colorMagenta = new THREE.Color(\"rgb(238, 88, 181)\");\n\nconst setIntersections = (pointer: any) => {\n  const { portals, raycaster, camera, canvas } = State;\n  if (camera && canvas) {\n    const meshes = portals\n      .map((portal) => portal.dst.mesh)\n      .concat(portals.map((portal) => portal.src.mesh));\n\n    raycaster.setFromCamera(pointer.clip2, camera);\n    const intersects = State.raycaster\n      .intersectObjects(meshes)\n      .map((intersect) => intersect.object);\n\n    const top = getTop(intersects);\n\n    State.intersects = top;\n\n    if (top.length > 0) {\n      canvas.style.cursor = \"default\";\n    } else {\n      canvas.style.cursor = \"crosshair\";\n    }\n\n    const intersectIds = State.intersects.map((intersect) => intersect.uuid);\n    for (let i = 0; i < portals.length; i++) {\n      const portal = portals[i];\n      const srcMesh = portal.src.mesh;\n      const dstMesh = portal.dst.mesh;\n      if (\n        intersectIds.includes(srcMesh.uuid) ||\n        intersectIds.includes(dstMesh.uuid)\n      ) {\n        // @ts-ignore\n        portal.src.outline.material.color.set(colorMagenta);\n        // @ts-ignore\n        portal.dst.outline.material.color.set(colorMagenta);\n        // @ts-ignore\n        portal.line1.material.color.set(colorMagenta);\n        // portal.src.outline.visible = true;\n        // portal.dst.outline.visible = true;\n        // portal.line1.visible = true;\n      } else {\n        // @ts-ignore\n        portal.src.outline.material.color.setHex(0xaaaaaa);\n        // @ts-ignore\n        portal.dst.outline.material.color.setHex(0xaaaaaa);\n        // @ts-ignore\n        portal.line1.material.color.setHex(0xaaaaaa);\n        // portal.src.outline.visible = false;\n        // portal.dst.outline.visible = false;\n        // portal.line1.visible = false;\n      }\n    }\n  }\n};\n\nconst Pointer = () => {\n  useEffect(() => {\n    const { canvas, pointer, camera, cameraDown, image, portals } = State;\n    if (canvas && camera) {\n      const pointerDown = (e: PointerEvent) => {\n        setPointer(pointer, e.clientX, e.clientY);\n        setPointerDown(pointer);\n        image.down.copy(image.mesh.position);\n        cameraDown.copy(camera.position);\n        pointer.active = true;\n\n        if (State.intersects.length > 0) {\n          const mesh = State.intersects[0];\n          mesh.userData.origin = new THREE.Vector3();\n          mesh.userData.origin.copy(mesh.position);\n        } else {\n          drawPointer(pointer.down.ray, pointer.ray);\n          // makePortal(\n          //   [pointer.ray.x, pointer.ray.y, 1, 1],\n          //   [pointer.ray.x, pointer.ray.y, 1, 1],\n          //   State.portals,\n          //   camera,\n          //   State.scene2\n          // );\n          // setIntersections(pointer);\n          // if (State.intersects.length > 0) {\n          //   const mesh = State.intersects[0];\n          //   mesh.userData.origin = new THREE.Vector3();\n          //   mesh.userData.origin.copy(mesh.position);\n          // }\n        }\n\n        canvas.setPointerCapture(e.pointerId);\n      };\n\n      const pointerMove = (e: PointerEvent) => {\n        setPointer(pointer, e.clientX, e.clientY);\n\n        if (pointer.active) {\n          pointer.diffMouse.copy(pointer.mouse).sub(pointer.down.mouse);\n          const worldPixel = getWorldPixelAtZ(camera.position.z, camera);\n          const dx = pointer.diffMouse.x * worldPixel;\n          const dy = pointer.diffMouse.y * worldPixel;\n          if (State.drawBox.outline.visible) {\n            drawPointer(pointer.down.ray, pointer.ray);\n          } else if (State.intersects.length > 0) {\n            const mesh = State.intersects[0];\n            if (mesh.userData.kind === \"dst\") {\n              const index = portals\n                .map((portal) => portal.dst.mesh.uuid)\n                .indexOf(mesh.uuid);\n              const portal = portals[index];\n              mesh.position.setX(mesh.userData.origin.x + dx);\n              mesh.position.setY(mesh.userData.origin.y - dy);\n              const x = mesh.userData.origin.x + dx;\n              const y = mesh.userData.origin.y - dy;\n              portal.dst.min.setX(x - mesh.scale.x / 2);\n              portal.dst.min.setY(y - mesh.scale.y / 2);\n              portal.dst.max.setX(x + mesh.scale.x / 2);\n              portal.dst.max.setY(y + mesh.scale.y / 2);\n\n              portals[index].dst.occluder.position.setX(x);\n              portals[index].dst.occluder.position.setY(y);\n              portals[index].dst.outline.position.setX(x);\n              portals[index].dst.outline.position.setY(y);\n\n              updateLines(portal);\n            } else if (mesh.userData.kind === \"src\") {\n              const index = portals\n                .map((portal) => portal.src.mesh.uuid)\n                .indexOf(mesh.uuid);\n              const portal = portals[index];\n              const x = mesh.userData.origin.x + dx;\n              const y = mesh.userData.origin.y - dy;\n              mesh.position.setX(x);\n              mesh.position.setY(y);\n              portal.src.min.setX(x - mesh.scale.x / 2);\n              portal.src.min.setY(y - mesh.scale.y / 2);\n              portal.src.max.setX(x + mesh.scale.x / 2);\n              portal.src.max.setY(y + mesh.scale.y / 2);\n\n              portals[index].src.occluder.position.setX(x);\n              portals[index].src.occluder.position.setY(y);\n              portals[index].src.outline.position.setX(x);\n              portals[index].src.outline.position.setY(y);\n\n              portal.src.outline.position.setX(mesh.userData.origin.x + dx);\n              portal.src.outline.position.setY(mesh.userData.origin.y - dy);\n\n              updateLines(portal);\n            }\n          } else {\n            // camera.position.setX(cameraDown.x - dx);\n            // camera.position.setY(cameraDown.y + dy);\n            image.mesh.position.setX(image.down.x + dx);\n            image.mesh.position.setY(image.down.y - dy);\n          }\n        } else {\n          setIntersections(pointer);\n        }\n      };\n\n      const pointerUp = (e: PointerEvent) => {\n        pointer.active = false;\n\n        if (State.drawBox.outline.visible === true) {\n          const width = State.drawBox.diff.x;\n          const height = State.drawBox.diff.y;\n          const dims = [\n            State.drawBox.min.x + width / 2,\n            State.drawBox.min.y + height / 2,\n            width,\n            height,\n          ];\n          if (State.scene2) {\n            makePortal(dims, dims, State.portals, camera);\n            State.drawBox.outline.visible = false;\n          }\n        }\n\n        canvas.releasePointerCapture(e.pointerId);\n      };\n\n      const mouseWheel = (e: Event) => {\n        const visibleHeight = window.innerHeight;\n        // @ts-ignore\n        const adjusted = visibleHeight + e.deltaY;\n        const ratio = visibleHeight / adjusted;\n\n        if (State.intersects.length > 0) {\n          for (let mesh of State.intersects) {\n            // if (group.userData.selected) {\n            const prevScaleX = mesh.scale.x;\n            const prevScaleY = mesh.scale.y;\n            const nextScaleX = prevScaleX * ratio;\n            const nextScaleY = prevScaleY * ratio;\n\n            const diffx = pointer.ray.x - mesh.position.x;\n            const rx = diffx / prevScaleX;\n            const newRx = diffx / nextScaleX;\n            const x = mesh.position.x + (newRx - rx) * nextScaleX;\n\n            const diffy = pointer.ray.y - mesh.position.y;\n            const ry = diffy / prevScaleY;\n            const newRy = diffy / nextScaleY;\n            const y = mesh.position.y + (newRy - ry) * nextScaleY;\n\n            mesh.position.x = x;\n            mesh.position.y = y;\n            mesh.scale.multiplyScalar(ratio);\n\n            if (mesh.userData.kind === \"dst\") {\n              const index = portals\n                .map((portal) => portal.dst.mesh.uuid)\n                .indexOf(mesh.uuid);\n              const portal = portals[index];\n              portals[index].dst.occluder.position.setX(x);\n              portals[index].dst.occluder.position.setY(y);\n              portals[index].dst.outline.position.setX(x);\n              portals[index].dst.outline.position.setY(y);\n              portals[index].dst.outline.scale.copy(mesh.scale);\n              portals[index].dst.occluder.scale.copy(mesh.scale);\n\n              portal.dst.min.setX(x - mesh.scale.x / 2);\n              portal.dst.min.setY(y - mesh.scale.y / 2);\n              portal.dst.max.setX(x + mesh.scale.x / 2);\n              portal.dst.max.setY(y + mesh.scale.y / 2);\n\n              updateLines(portal);\n            } else if (mesh.userData.kind === \"src\") {\n              const index = portals\n                .map((portal) => portal.src.mesh.uuid)\n                .indexOf(mesh.uuid);\n              const portal = portals[index];\n              mesh.position.setX(x);\n              mesh.position.setY(y);\n              portals[index].src.occluder.position.setX(x);\n              portals[index].src.occluder.position.setY(y);\n              portals[index].src.outline.position.setX(x);\n              portals[index].src.outline.position.setY(y);\n\n              portal.src.outline.position.setX(x);\n              portal.src.outline.position.setY(y);\n\n              portals[index].src.outline.scale.copy(mesh.scale);\n              portals[index].src.occluder.scale.copy(mesh.scale);\n\n              portal.src.min.setX(x - mesh.scale.x / 2);\n              portal.src.min.setY(y - mesh.scale.y / 2);\n              portal.src.max.setX(x + mesh.scale.x / 2);\n              portal.src.max.setY(y + mesh.scale.y / 2);\n\n              const { srcWidth, srcHeight } = getDimensions(portal);\n              const worldPixel = getWorldPixelAtZ(\n                camera.position.z,\n                State.camera\n              );\n              const makeSrcTexture = () => {\n                return new THREE.DataTexture(\n                  new Uint8Array(\n                    (srcWidth / worldPixel) * (srcHeight / worldPixel) * 3\n                  ),\n                  srcWidth / worldPixel,\n                  srcHeight / worldPixel,\n                  THREE.RGBFormat\n                );\n              };\n              const newTexture = makeSrcTexture();\n              // @ts-ignore\n              portal.dst.mesh.material.map = newTexture;\n\n              updateLines(portal);\n            }\n          }\n        } else {\n          const prevScaleX = image.mesh.scale.x;\n          const prevScaleY = image.mesh.scale.y;\n          const nextScaleX = prevScaleX * ratio;\n          const nextScaleY = prevScaleY * ratio;\n\n          const diffx = pointer.ray.x - image.mesh.position.x;\n          const rx = diffx / prevScaleX;\n          const newRx = diffx / nextScaleX;\n          const x = image.mesh.position.x + (newRx - rx) * nextScaleX;\n\n          const diffy = pointer.ray.y - image.mesh.position.y;\n          const ry = diffy / prevScaleY;\n          const newRy = diffy / nextScaleY;\n          const y = image.mesh.position.y + (newRy - ry) * nextScaleY;\n\n          image.mesh.position.x = x;\n          image.mesh.position.y = y;\n          image.mesh.scale.multiplyScalar(ratio);\n        }\n      };\n\n      canvas.addEventListener(\"pointerdown\", pointerDown);\n      canvas.addEventListener(\"pointermove\", pointerMove);\n      canvas.addEventListener(\"pointerup\", pointerUp);\n      canvas.addEventListener(\"pointercancel\", pointerUp);\n      canvas.addEventListener(\"mousewheel\", mouseWheel, { passive: false });\n      return () => {\n        canvas.removeEventListener(\"pointerdown\", pointerDown);\n        canvas.removeEventListener(\"pointermove\", pointerMove);\n        canvas.removeEventListener(\"pointerup\", pointerUp);\n        canvas.removeEventListener(\"pointercancel\", pointerUp);\n        canvas.removeEventListener(\"mousewheel\", mouseWheel);\n      };\n    }\n  }, []);\n\n  return null;\n};\n\nexport default Pointer;\n","import gitInfo from \"./gitInfo.json\";\n\nconst GitInfo = () => {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        right: 0,\n        bottom: 0,\n        background: \"white\",\n        color: \"black\",\n        fontSize: 13,\n        lineHeight: 1.2,\n      }}\n    >\n      Under construction\n      <br />\n      <a\n        href=\"https://github.com/constraint-systems/portal\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {gitInfo.lastCommit}\n      </a>\n    </div>\n  );\n};\n\nexport default GitInfo;\n","import { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport State from \"./State\";\nimport Pointer from \"./Pointer\";\nimport { getWorldPixelAtZ, loadImage } from \"./Actions\";\nimport GitInfo from \"./GitInfo\";\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    State.canvas = canvas;\n\n    if (canvas !== null) {\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n      State.camera = camera;\n\n      const renderer = new THREE.WebGLRenderer({ canvas: canvas });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.autoClear = false;\n      State.renderer = renderer;\n\n      setLoaded(true);\n\n      State.scene.add(State.image.mesh);\n      loadImage(State.image, \"bowiebig.png\");\n\n      camera.position.z = 5;\n\n      State.drawBox.outline.visible = false;\n      State.drawBox.outline.renderOrder = 999;\n      State.scene3.add(State.drawBox.outline);\n\n      // makePortal([-1, -1, 2, 1], [2, 1, 2, 1], State.portals, camera);\n      // makePortal([-3, -1, 1, 1], [-2, 1, 1, 1], State.portals, camera);\n\n      const vector = new THREE.Vector2();\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n\n        renderer.clear();\n        renderer.render(State.scene, camera);\n\n        const worldPixel = getWorldPixelAtZ(camera.position.z, State.camera);\n        for (let i = 0; i < State.portals.length; i++) {\n          const portal = State.portals[i];\n          vector.x = portal.src.min.x / worldPixel + window.innerWidth / 2;\n          vector.y = portal.src.min.y / worldPixel + window.innerHeight / 2;\n\n          renderer.copyFramebufferToTexture(\n            vector,\n            // @ts-ignore\n            portal.dst.mesh.material.map\n          );\n          renderer.render(portal.dst.scene, camera);\n        }\n\n        renderer.render(State.scene2, camera);\n        renderer.clearDepth();\n        renderer.render(State.scene3, camera);\n      };\n      animate();\n    }\n  }, []);\n\n  useEffect(() => {\n    const { camera, renderer } = State;\n    if (camera && renderer) {\n      const handleResize = () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      };\n      window.addEventListener(\"resize\", handleResize);\n    }\n  }, []);\n\n  return (\n    <>\n      <canvas ref={canvasRef}></canvas>\n      {loaded ? (\n        <>\n          <Pointer />\n        </>\n      ) : null}\n      <GitInfo />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}